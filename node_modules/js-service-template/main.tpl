{% import 'types.tpl' as types with context %}

### @file etc/build/index.jsd ###

### @file_list lib/ ###

### @endfile ###

### @file etc/build/index.jst ###
var Thrift = require('js-thrift-client');

/*%make -s index.js-compile%*/

module.exports = {{ data.namespace }};
### @endfile ###


### @file ./package.json ###
{% include "package.tpl" %}
### @endfile ###


### @file lib/{{ data.namespace }}/{{ data.namespace }}.js ###


var types = {};


/**
 * @namespace
 */
var {{ data.namespace }} = {};


/**
 * @namespace
 */
{{ data.namespace }}.build = {};


/**
 * @type {string}
 */
{{ data.namespace }}.NAME = '{{ data.services[0].name }}';


/**
 * @type {string}
 */
{{ data.namespace }}.VERSION = '{{ data.services[0].version }}';


/**
 * @type {string}
 */
{{ data.namespace }}.ID = '{{ data.services[0].id }}';



/**
 * @type {lt.{{ data.services[0].name }}Client}
 */
{{ data.namespace }}.__client = null;


/**
 * @param {string} url
 */
{{ data.namespace }}.init = function(url) {
  {{ data.namespace }}.__client = new {{ data.namespace }}.{{ data.services[0].name }}Client(
      new Thrift.Protocol(new Thrift.Transport(url, true)));
};

{% for method in data.services[0].methods %}

/**
 * @param {function({{ types.printJs(method.return_type) }})} complete
 * @param {function(Error)} cancel
 {% for arg in method.arguments -%}
   * @param {{ '{' + types.printJs(arg) + '}' }} {{ arg.name  }}
 {% endfor -%}
 */
{{ data.namespace }}.{{ method.name }} =
    function(complete, cancel
             {%- for arg in method.arguments -%}
               , {{ arg.name }}
             {%- endfor %}) {
  try {
    {{ data.namespace }}.__client.{{ method.name }}(
        {%- for arg in method.arguments -%}
          {{ arg.name }},
        {%- endfor %} complete);

  } catch (error) {
    cancel(error);
  }
};

{% endfor %}


{% for structure in data.structures %}


/**
 {% for field in structure.fields -%}
   * @param {{ '{' + types.printJs(field) + '}' }} {{ field.name  }}
 {% endfor -%}
 */
{{ data.namespace }}.build.{{ structure.name | first | lower + structure.name[1:] }} = 
    function({%- for field in structure.fields -%}
               {% if not loop.first %}, {% endif %}
               {{ field.name }}
             {%- endfor %}) {

  return new types.{{ structure.name }}({
    {% for field in structure.fields -%}
      {{ field.name }}: {{ field.name }} || undefined
      {%- if not loop.last %}, {% endif %}
    {% endfor -%}
  });
}

{% endfor %}

### @endfile ###
