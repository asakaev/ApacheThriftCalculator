{% import 'types.tpl' as types with context %}
{% set methods = data.services[0].methods %}


/**
 * @constructor
 * @implements {{ '{' + data.namespace }}.api.IHandler}
 */
{{ data.namespace }}.api.Handler = function() {

  /**
   * @type {!yaa.api.ISession}
   */
  this.__session = yaa.api.session();
}


{% for method in methods %}

/**
 * @inheritDoc
 */
{{ data.namespace }}.api.Handler.prototype.{{ method.name }} = 
    function({%- for arg in method.arguments -%}
               {% if not loop.first %}, {% endif %}
               {{ arg.name }}
             {%- endfor %}) {
  return yaa.error('Not implemented.');
}

{% endfor %}


/**
 * @inheritDoc
 */
{{ data.namespace }}.api.Handler.prototype.session =
    function(complete, cancel, call) {
  complete(this.__session);
};


/**
 * @inheritDoc
 */
{{ data.namespace }}.api.Handler.prototype.stateful = function(call) {
  return false;   
};


/**
 * @inheritDoc
 */
{{ data.namespace }}.api.Handler.prototype.task = function(call) {
  return null;
};