{% import 'types.tpl' as types with context %}
{% set methods = data.services[0].methods %}

/**
 * @interface
 */
{{ data.namespace }}.api.IHandler = function() {};


{% for method in methods %}

/**
 {% for arg in method.arguments -%}
   * @param {{ '{' + types.printJs(arg) + '}' }} {{ arg.name  }}
 {% endfor -%}
 *
 * @return {!yaa.Step}
 */
{{ data.namespace }}.api.IHandler.prototype.{{ method.name }} = 
    function({%- for arg in method.arguments -%}
               {% if not loop.first %}, {% endif %}
               {{ arg.name }}
             {%- endfor %}) {};

{% endfor %}


/**
 * @param {function(!yaa.api.ISession)} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!tio.thrift.Message} call
 */
{{ data.namespace }}.api.IHandler.prototype.session =
    function(complete, cancel, call) {};


/**
 * @param {!tio.thrift.Message} call
 * @return {boolean}
 */
{{ data.namespace }}.api.IHandler.prototype.stateful = function(call) {};


/**
 * @param {!tio.thrift.Message} call
 * @return {yaa.Step}
 */
{{ data.namespace }}.api.IHandler.prototype.task = function(call) {};
