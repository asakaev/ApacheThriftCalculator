{% import 'types.tpl' as types with context %}
{% set methods = data.services[0].methods %}


/**
 * @param {string} type
 * @param {number} port
 * @param {string} host
 */
{{ data.namespace }}.client.init = function(type, port, host) {
  {{ data.namespace }}.client.__type = type;
  tio.client.init(port, host);
};


{% for method in methods -%}

/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel

   {% for arg in method.arguments -%}

 * @param {{ '{' + types.printJs(arg) + '}' }} {{ arg.name  }}

   {% endfor -%}
 */
{{ data.namespace }}.client.{{ method.name }} =
    function(complete, cancel
        {%- for arg in method.arguments %},
          {{ arg.name }}
        {%- endfor %}) {

  {{ data.namespace }}.client.__call(
      complete, cancel, {{ data.namespace }}.Api.{{ method.name | camel_to_snake(upper=true) }}, arguments);
};

{% endfor %}


/**
 * @type {number}
 */
{{ data.namespace }}.client.__seqid = 0;


/**
 * @type {string}
 */
{{ data.namespace }}.client.__type = '';


/**
 * @type {yaa.Step}
 */
{{ data.namespace }}.client.__session = null;

/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {string} name
 * @param {!Arguments} args
 */
{{ data.namespace }}.client.__call = function(complete, cancel, name, args) {
  if ({{ data.namespace }}.client.__session === null) {
    {{ data.namespace }}.client.__session =
        yaa.api.client.session(tio.client.http({{ data.namespace }}.protocol(),
            {{ data.namespace }}.NAME, {{ data.namespace }}.VERSION,
                {{ data.namespace }}.client.__type) || yaa.nop());
  }

  {{ data.namespace }}.client.__session.call(null, complete, cancel,
      new tio.thrift.Message({{ data.namespace }}.client.__seqid += 1,
          name, Array.prototype.slice.call(args, 2), {}));
};







