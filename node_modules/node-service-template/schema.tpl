{% import 'types.tpl' as types %}
{% set service = data.services[0] %}

/**
 * @constructor
 * @implements {thrift.ISchema}
 */
{{ data.namespace }}.Schema = function() {

  /**
   * @type {!Object}
   */
  this.__structures = {
    {% for struct in data.structures -%}
    '{{ struct.name }}': new thrift.definition.Structure({
      {% for field in struct.fields -%}
      '{{ field.name }}': new thrift.definition.Field('{{field.name}}', {{field.index}},
          {{ types.printThrift(field) -}}
          {{ types.printThriftIfExist(field.value) -}}
          {{ types.printThriftIfExist(field.key) -}}
      ){% if not loop.last %},{% endif %}
      {% endfor -%}
    }){% if not loop.last %},{% endif %}
    {% endfor -%}
  };

  /**
   * @type {!Object}
   */
  this.__methods = {
    {% for method in service.methods -%}
    '{{ method.name }}': new thrift.definition.Method(
        {
          {% for argument in method.arguments -%}
          '{{ argument.index }}': new thrift.definition.Field('{{ argument.name }}', {{ argument.index }},
              {{ types.printThrift(argument) -}}
              {{ types.printThriftIfExist(argument.value) -}}
              {{ types.printThriftIfExist(argument.key) -}}
          ){% if not loop.last %},{% endif %}
          {% endfor -%}
        }{% if method.return_type %}, 
            new thrift.definition.FullType(
            {{ types.printThrift(method.return_type) -}}
            {{ types.printThriftIfExist(method.return_type.value) -}}
            {{ types.printThriftIfExist(method.return_type.key) -}})
        {%- endif %}
    ){% if not loop.last %},{% endif %}
    {% endfor -%}
  }
};


/**
 * @inheritDoc
 */
{{ data.namespace }}.Schema.prototype.getStructureDefinition =
    function(name) {
  return this.__structures[name] || null;
};


/**
 * @inheritDoc
 */
{{ data.namespace }}.Schema.prototype.getMethodDefinition =
    function(name) {
  return this.__methods[name] || null;
};


/**
 * @inheritDoc
 */
{{ data.namespace }}.Schema.prototype.createStructure =
    function(name, str) {
  {% if data.structures | length != 0 -%}
  var builder = {{ data.namespace }}.model.getModelBuilder();
  switch (name) {
    {% for structure in data.structures -%}
    case '{{ structure.name }}': 
      return builder.create{{ structure.name }}(
          {% for field in structure.fields -%}
            {%- if not loop.first %}, {% endif -%}
            str[{{ field.index }}]
          {%- endfor -%}
      )
    {% endfor -%}
  }
  {%- endif %}
  return str;
};

