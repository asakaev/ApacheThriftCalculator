

/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.parallel = function(handler, source, opt_output) {
  var output = opt_output || yaa.nop();

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function parallel(complete, cancel, var_args) {
    var input = arguments;
    var context = this;
    var c = 0;
    var i = -1;

    /**
     * @param {...yaa.Output} var_args
     */
    function localComplete(var_args) {
      if (c === (i += 1)) {
        output.call(context, complete, cancel, input[2]);
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      for (var i = 0; i < arguments.length; i += 1) {
        if (arguments[i] !== undefined) {
          c += 1;
          break;
        }
      }

      if (i < arguments.length) {
        handler.call(context, localComplete, cancel, arguments[0]);
        source.call(context, handleSource, cancel, input[2]);
      } else {
        localComplete();
      }
    }

    source.call(context, handleSource, cancel, input[2]);
  }

  return parallel;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.sequence = function(handler, source, opt_output) {
  var output = opt_output || yaa.nop();

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function sequence(complete, cancel, var_args) {
    var input = arguments;
    var context = this;

    /**
     * @param {...yaa.Output} var_args
     */
    function callSource(var_args) {
      source.call(context, handleSource, cancel, arguments[0]);
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      for (var i = 0; i < arguments.length; i += 1) {
        if (arguments[i] !== undefined) {
          break;
        }
      }

      if (i < arguments.length) {
        handler.call(context, callSource, cancel, arguments[0]);
      } else {
        output.call(context, complete, cancel, input[2]);
      }
    }

    callSource(input[2]);
  }

  return sequence;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.once = function(handler, source, opt_output) {
  var output = opt_output || yaa.nop();

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function once(complete, cancel, var_args) {
    var input = arguments;
    var context = this;

    /**
     * @param {...yaa.Output} var_args
     */
    function localComplete(var_args) {
      output.call(context, complete, cancel, input[2]);
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      for (var i = 0; i < arguments.length; i += 1) {
        if (arguments[i] !== undefined) {
          break;
        }
      }

      if (i < arguments.length) {
        handler.call(context, localComplete, cancel, arguments[0]);
      } else {
        output.call(context, complete, cancel, input[2]);
      }
    }

    source.call(context, handleSource, cancel, input[2]);
  }

  return once;
};
