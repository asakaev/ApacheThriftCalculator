var yaa = require('../../../bin/index.js');
var test = require('../../test.js');
var cases = [];
var context = {};

module.exports = test(cases, __filename.substr(__dirname.length + 1), context);


/**
 * @this {yaa.Context}
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {string} key
 */
function markContext(complete, cancel, key) {
  var context = this;

  setTimeout(function() {
    context[key] = true;
    complete();
  }, 10 * key);
}

/**
 * @this {Array}
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {string} key
 */
function pushToContext(complete, cancel, key) {
  var context = this;

  setTimeout(function() {
    context.push(key);
    complete();
  }, 10 * key);
}


/**
 * @param {number} size
 */
function countdown(size) {
  var value = size + 1;

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function countdown(complete, cancel) {
    var result = value -= 1;
    if (result >= 1) {
      complete(result);
    } else {
      complete();
    }
  }

  return countdown;
}


cases.push(yaa.assert.outputEquals(
    yaa.use(yaa.proc.parallel(yaa.nop(), countdown(10)), yaa.no()),
    yaa.no(), 'Proc method proxy input.'));

cases.push(yaa.assert.outputEquals(
    yaa.use(yaa.proc.parallel(yaa.nop(), countdown(10), yaa.insert(context)), yaa.no()),
    yaa.insert(context), 'Proc method return output.'));

cases.push(yaa.assert.outputEquals(
    yaa.use(yaa.proc.parallel(yaa.nop(), countdown(10)), yaa.yes()),
    yaa.yes(), 'Proc method proxy input.'));


cases.push(yaa.bind(yaa.sequence([
  yaa.proc.parallel(markContext, countdown(10)),
  yaa.assert.contextDeepEquals({
    '1': true,
    '2': true,
    '3': true,
    '4': true,
    '5': true,
    '6': true,
    '7': true,
    '8': true,
    '9': true,
    '10': true
  }, 'Context correct.')
]), {}));


cases.push(yaa.bind(yaa.sequence([
  yaa.proc.parallel(markContext, countdown(1)),
  yaa.assert.contextDeepEquals({
    '1': true
  }, 'Context correct.')
]), {}));


cases.push(yaa.bind(yaa.sequence([
  yaa.proc.parallel(pushToContext, countdown(10)),
  yaa.assert.fail(
      yaa.assert.contextDeepEquals([10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
          'Context ordered.'), 'Should be inverted.')
]), []));
