var thrift = require('../bin/index.js');
var Idl = require('./idl.js');
var settings = require('./settings.js');
var idl = new Idl();
var protocol = new thrift.protocol.Binary(idl);
var parser = new thrift.Parser(protocol, idl);

var structure = settings.testStructure;
var longString = (new Array(1000)).join('$');


var messagesQueue = [
  thrift.encodeMessage([structure], 0, 'testIncludedValue',
      thrift.definition.MessageType.CALL, protocol),
  thrift.encodeMessage([longString], 1, 'testLongString',
      thrift.definition.MessageType.CALL, protocol),
  thrift.encodeMessage([longString], 2, 'testIncludedValue',
      thrift.definition.MessageType.REPLY, protocol),
  thrift.encodeMessage([longString], 3, 'testLongString',
      thrift.definition.MessageType.REPLY, protocol)
];

for (var j in messagesQueue) {
  var encodedData = messagesQueue[j];
  for (var i = 0; i < encodedData.length; i += 2) {
    var chunk = encodedData.slice(i, i + 2);
    messageHandler(parser.process(chunk));
  }
}

function messageHandler(messages) {
  for (var n in messages) {
    var message = messages[n];
    var type = message.getType();
    if (type === thrift.definition.MessageType.CALL) {
      var payload = message.getPayload()['arg1'];
      console.log('Call');

      if (message.getName() === 'testIncludedValue') {
        console.log('testIncludedValue',
                JSON.stringify(payload) === JSON.stringify(structure));
      }

      if (message.getName() === 'testLongString') {
        console.log('testLongString', payload.length === longString.length);
      }

    }
    if (type === thrift.definition.MessageType.REPLY) {
      payload = message.getPayload()['response'];
      console.log('Reply');

      if (message.getName() === 'testIncludedValue') {
        console.log('testIncludedValue',
                payload.length === longString.length);
      }

      if (message.getName() === 'testLongString') {
        console.log('testLongString', payload.length === longString.length);
      }
    }

  }

}

