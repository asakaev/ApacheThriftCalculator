/**
 * @namespace
 */
var thrift = {};


/**
 * @namespace
 */
thrift.protocol = {};


/**
 * @namespace
 */
thrift.protocol.binary = {};


/**
 * @namespace
 */
thrift.protocol.json = {};


/**
 * @namespace
 */
thrift.protocol.collector = {};


/**
 * @namespace
 */
thrift.definition = {};


/**
 * @namespace
 */
thrift.io = {};


/**
 * @namespace
 */
thrift.io.http = {};


/**
 * @namespace
 */
thrift.io.tcp = {};


/**
 * @typedef {*}
 */
thrift.Value;


/**
 * @typedef {*}
 */
thrift.Error;


/**
 * @typedef {function(*)}
 */
thrift.CompleteHandler;


/**
 * @typedef {function(thrift.Error, number=)}
 */
thrift.ErrorHandler;


/**
 * @typedef {?function(number,
 *    !thrift.protocol.IProtocol):thrift.IPacketHandler}
 */
thrift.HandlerBuilder;


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {thrift.IPacketHandler}
 */
thrift.handlerBuilder = function(type, protocol) {};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {number} id
 * @param {string} name
 * @param {!Array.<thrift.Value>} args
 * @return {!Buffer}
 */
thrift.encodeCall = function(protocol, id, name, args) {};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {number} id
 * @param {string} name
 * @param {thrift.Value} data
 * @return {!Buffer}
 */
thrift.encodeReply = function(protocol, id, name, data) {};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!number} id
 * @param {!string} name
 * @param {!string} message
 * @param {number=} opt_code
 * @return {!Buffer}
 */
thrift.encodeException =
    function(protocol, id, name, message, opt_code) {};


/**
 * @param {thrift.Value} field
 * @param {!thrift.definition.FullType} fullType
 * @param {!thrift.ISchema} idl
 * @return {thrift.Value}
 */
thrift.convertNestedStructure = function(field, fullType, idl) {};


/**
 * @param {string} type structure class name.
 * @param {!Object} structure thriftStructure
 * @param {!thrift.ISchema} idl
 * @return {!Object}
 */
thrift.convertStructure = function(type, structure, idl) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!thrift.Value} value
 * @param {!thrift.definition.FullType} fullType
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.serializeValue = function(collector, value, fullType, protocol) {};


/**
 * @interface
 */
thrift.IStructure = function() {};


/**
 * @return {!Object}
 */
thrift.IStructure.prototype.toThrift = function() {};


/**
 * @interface
 */
thrift.IPacketHandler = function() {};


/**
 * Shifts cursor and returns is's new position.
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 * @return {boolean} Flag of packet handling.
 */
thrift.IPacketHandler.prototype.process = function(cursor, chunk) {};


/**
 * @return {thrift.Value}
 */
thrift.IPacketHandler.prototype.get = function() {};


/**
 * @interface
 */
thrift.IValueKeeper = function() {};


/**
 * @return {boolean}
 */
thrift.IValueKeeper.prototype.isComplete = function() {};


/**
 * @param {thrift.Value} value
 */
thrift.IValueKeeper.prototype.applyData = function(value) {};


/**
 * @return {thrift.Value} value
 */
thrift.IValueKeeper.prototype.get = function() {};


/**
 * @return {number} type
 */
thrift.IValueKeeper.prototype.getType = function() {};


/**
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.IValueKeeper.prototype.processHeader = function(cursor, chunk) {};


/**
 * @return {boolean} Flag of packet handling.
 */
thrift.IValueKeeper.prototype.isHeaderComplete = function() {};


/**
 * @interface
 */
thrift.ISchema = function() {};


/**
 * @param {string} type
 * @param {!Object} args
 * @return {!Object}
 */
thrift.ISchema.prototype.createStructure = function(type, args) {};


/**
 * @param {string} type
 * @return {thrift.definition.Structure}
 */
thrift.ISchema.prototype.getStructureDefinition = function(type) {};


/**
 * @param {string} name
 * @return {thrift.definition.Method}
 */
thrift.ISchema.prototype.getMethodDefinition = function(name) {};


/**
 * Global cursor.
 * @constructor
 */
thrift.Cursor = function() {};


/**
 * @return {number} current cursor position.
 */
thrift.Cursor.prototype.getPosition = function() {};


/**
 * @param {number} value increment current position on value.
 */
thrift.Cursor.prototype.incrPosition = function(value) {};


/**
 * @return {boolean}
 */
thrift.Cursor.prototype.isParsed = function() {};


/**
 * set this.__isParsed in false, flag - finish data.
 */
thrift.Cursor.prototype.breakParsing = function() {};


/**
 * @constructor
 *
 * @param {string} name
 * @param {number} type
 * @param {number} seqid
 * @param {thrift.Value} value
 */
thrift.Message = function(name, type, seqid, value) {};


/**
 * @return {thrift.Value}
 */
thrift.Message.prototype.getValue = function() {};


/**
 * @return {number}
 */
thrift.Message.prototype.getType = function() {};


/**
 * @return {string}
 */
thrift.Message.prototype.getName = function() {};


/**
 * @return {number}
 */
thrift.Message.prototype.getId = function() {};


/**
 * @return {boolean}
 */
thrift.Message.prototype.isException = function() {};


/**
 * @constructor
 * @param {number} type
 * @param {number} id
 * @param {thrift.Value} value
 */
thrift.Field = function(type, id, value) {};


/**
 * @return {thrift.Value}
 */
thrift.Field.prototype.getValue = function() {};


/**
 * @return {number}
 */
thrift.Field.prototype.getType = function() {};


/**
 * @return {number}
 */
thrift.Field.prototype.getId = function() {};


/**
 * @constructor
 * @param {!thrift.protocol.IProtocol}  protocol
 */
thrift.Parser = function(protocol) {};


/**
 * @param {!Buffer} chunk
 * @param {function(thrift.Value)} callback
 */
thrift.Parser.prototype.process = function(chunk, callback) {};


/**
 *
 * @constructor
 * @implements {thrift.IPacketHandler}
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!thrift.HandlerBuilder} valueHandlerBuilder
 * @param {!thrift.IValueKeeper} valueKeeper
 */
thrift.IncludedHandler = function(protocol, valueHandlerBuilder,
                                  valueKeeper) {};


/**
 * @inheritDoc
 */
thrift.IncludedHandler.prototype.process = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.IncludedHandler.prototype.get = function() {};


/**
 * @constructor
 * @implements {thrift.IPacketHandler}
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.SimpleHandler = function(type, protocol) {};


/**
 * @inheritDoc
 */
thrift.SimpleHandler.prototype.get = function() {};


/**
 * @inheritDoc
 */
thrift.SimpleHandler.prototype.process = function(cursor, chunk) {};


/**
 * @constructor
 * @implements {thrift.IPacketHandler}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!thrift.IValueKeeper} keeper
 */
thrift.JsonHandler = function(protocol, keeper) {};


/**
 * @inheritDoc
 */
thrift.JsonHandler.prototype.process = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.JsonHandler.prototype.get = function() {};


/**
 * TODO: remove
 *
 * @enum {number}
 */
thrift.definition.ExceptionType = {
  'UNKNOWN': 0,
  'UNKNOWN_METHOD': 1,
  'INVALID_MESSAGE_TYPE': 2,
  'WRONG_METHOD_NAME': 3,
  'BAD_SEQUENCE_ID': 4,
  'MISSING_RESULT': 5,
  'INTERNAL_ERROR': 6,
  'PROTOCOL_ERROR': 7,
  'INVALID_TRANSFORM': 8,
  'INVALID_PROTOCOL': 9,
  'UNSUPPORTED_CLIENT_TYPE': 10
};


/**
 * @enum {number}
 */
thrift.definition.MessageType = {
  CALL: 1,
  REPLY: 2,
  EXCEPTION: 3
};


/**
 * @enum {number}
 */
thrift.definition.Type = {
  'NOP': -1,
  'STOP': 0,
  'VOID': 1,
  'BOOL': 2,
  'BYTE': 3,
  'I08': 3,
  'DOUBLE': 4,
  'I16': 6,
  'I32': 8,
  'I64': 10,
  'STRING': 11,
  'UTF7': 11,
  'STRUCT': 12,
  'MAP': 13,
  'SET': 14,
  'LIST': 15,
  'UTF8': 16,
  'UTF16': 17
};


/**
 * Wrapper for types;
 *
 * @constructor
 * @param {thrift.definition.Type|string} type
 * @param {!thrift.definition.FullType|string|thrift.definition.Type=} opt_vType
 * @param {!thrift.definition.FullType|string|thrift.definition.Type=} opt_kType
 */
thrift.definition.FullType = function(type, opt_vType, opt_kType) {};


/**
 * @return {number}
 */
thrift.definition.FullType.prototype.getType = function() {};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.FullType.prototype.getKeyType = function() {};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.FullType.prototype.getValueType = function() {};


/**
 * @return {string}
 */
thrift.definition.FullType.prototype.getStructType = function() {};


/**
 * @constructor
 * @param {string} name
 * @param {number} id
 * @param {thrift.definition.Type|string} type
 * @param {!thrift.definition.FullType|thrift.definition.Type|string=} opt_vType
 * @param {!thrift.definition.FullType|thrift.definition.Type|string=} opt_kType
 */
thrift.definition.Field = function(name, id, type, opt_vType, opt_kType) {};


/**
 * @return {!string}
 */
thrift.definition.Field.prototype.getName = function() {};


/**
 * @return {number}
 */
thrift.definition.Field.prototype.getId = function() {};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.Field.prototype.getFullType = function() {};


/**
 * @return {number}
 */
thrift.definition.Field.prototype.getType = function() {};


/**
 * @constructor
 *
 * @param {!Object.<number, !thrift.definition.Field>} parameters
 * @param {!thrift.definition.FullType=} opt_returnType
 */
thrift.definition.Method = function(parameters, opt_returnType) {};


/**
 * @param {number|string} id
 * @return {thrift.definition.Field}
 */
thrift.definition.Method.prototype.getParameter = function(id) {};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.Method.prototype.getReturnType = function() {};


/**
 * @constructor
 *
 * @param {!Object.<string, !thrift.definition.Field>} fields
 */
thrift.definition.Structure = function(fields) {};


/**
 * @param {string} id
 * @return {thrift.definition.FullType}
 */
thrift.definition.Structure.prototype.getTypeById = function(id) {};


/**
 * @param {string} name
 * @return {thrift.definition.FullType}
 */
thrift.definition.Structure.prototype.getTypeByName = function(name) {};


/**
 * @param {string} name
 * @return {number}
 */
thrift.definition.Structure.prototype.getIdByName = function(name) {};


/**
 * @constructor
 * @implements {thrift.protocol.IProtocol}
 * @param {!thrift.ISchema} idl
 */
thrift.protocol.Binary = function(idl) {};


/**
 * @type {number} 0x80010000
 */
thrift.protocol.Binary.prototype.VERSION;


/**
 * @type {number} -65536
 */
thrift.protocol.Binary.prototype.VERSION_MASK;


/**
 * @type {number}
 */
thrift.protocol.Binary.prototype.TYPE_MASK;


/**
 * @return {!thrift.ISchema}
 */
thrift.protocol.Binary.prototype.getIdl = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeStructure =
    function(collector, userStructure, type) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeArray =
    function(collector, array, fullValueType) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeFieldHeader =
    function(collector, type, id) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeFieldStop = function(collector) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeStructureStop = function(collector) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeMapHeader =
    function(collector, ktype, vtype, size) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeListHeader =
    function(collector, etype, size) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeSetHeader =
    function(collector, etype, size) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeBool = function(collector, bool) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeByte = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI16 = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI32 = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI64 = function(collector, value) {};


/**
 *
 *
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeDouble = function(collector, double) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeString = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readBool = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readByte = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI16 = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI32 = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI64 = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readDouble = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readString = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.getType = function() {};


/**
 * @constructor
 * @implements {thrift.protocol.IProtocol}
 *
 * @param {!thrift.ISchema} idl
 */
thrift.protocol.Json = function(idl) {};


/**
 * @type {number}
 */
thrift.protocol.Json.VERSION;


/**
 * @enum {string}
 */
thrift.protocol.Json.TYPE = {
  2: 'tf',
  3: 'i8',
  4: 'dbl',
  6: 'i16',
  8: 'i32',
  10: 'i64',
  11: 'str',
  12: 'rec',
  14: 'set',
  13: 'map',
  15: 'lst'
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeFieldHeader =
    function(collector, type, id) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeFieldStop = function(collector) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeStructureStop = function(collector) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeArray =
    function(collector, array, fullValueType) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeStructure =
    function(collector, userStructure, type) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeListHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeMapHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeSetHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeBool = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeByte = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI16 = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI32 = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI64 = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeDouble = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeString = function(collector, value) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readString = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readDouble = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI16 = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readByte = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI64 = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readBool = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI32 = function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.getIdl = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.getType = function() {};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.MAP_HANDLER = function(type, protocol) {};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.ARRAY_HANDLER = function(type, protocol) {};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.FIELD_HANDLER = function(type, protocol) {};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.STRUCTURE_HANDLER = function(type, protocol) {};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.MESSAGE_HANDLER = function(protocol) {};


/**
 * @enum {number}
 */
thrift.protocol.Type = {
  BINARY: 0,
  JSON: 1
};


/**
 * @interface
 */
thrift.protocol.IProtocol = function() {};


/**
 * @return {!thrift.ISchema}
 */
thrift.protocol.IProtocol.prototype.getIdl = function() {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} userStructure
 * @param {!string} type
 */
thrift.protocol.IProtocol.prototype.serializeStructure =
    function(collector, userStructure, type) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} array
 * @param {!thrift.definition.FullType} valInfo
 */
thrift.protocol.IProtocol.prototype.serializeArray =
    function(collector, array, valInfo) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} map
 * @param {!thrift.definition.FullType} keyInfo
 * @param {!thrift.definition.FullType} valInfo
 */
thrift.protocol.IProtocol.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {string} methodName
 * @param {number} type
 * @param {number} seqid
 */
thrift.protocol.IProtocol.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} id
 */
thrift.protocol.IProtocol.prototype.writeFieldHeader =
    function(collector, type, id) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 */
thrift.protocol.IProtocol.prototype.writeFieldStop = function(collector) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 */
thrift.protocol.IProtocol.prototype.writeStructureStop = function(collector) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} ktype
 * @param {number} vtype
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeMapHeader =
    function(collector, ktype, vtype, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeListHeader =
    function(collector, type, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeSetHeader =
    function(collector, type, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {boolean} value
 */
thrift.protocol.IProtocol.prototype.writeBool = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeByte = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeI16 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeI32 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {thrift.protocol.Int64|number} value
 */
thrift.protocol.IProtocol.prototype.writeI64 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeDouble = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {string} value
 */
thrift.protocol.IProtocol.prototype.writeString = function(collector, value) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {boolean}
 */
thrift.protocol.IProtocol.prototype.readBool = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readByte = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readI16 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readI32 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {thrift.protocol.Int64}
 */
thrift.protocol.IProtocol.prototype.readI64 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readDouble = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {string}
 */
thrift.protocol.IProtocol.prototype.readString = function(cursor, chunk) {};


/**
 * @return {thrift.protocol.Type}
 */
thrift.protocol.IProtocol.prototype.getType = function() {};


/**
 * @constructor
 *
 * @param {!Buffer|number} int64
 */
thrift.protocol.Int64 = function(int64) {};


/**
 * @type {number}
 */
thrift.protocol.Int64.prototype.MAX_VALUE;


/**
 * @param {Buffer} chunk
 * @return {number}
 */
thrift.protocol.Int64.prototype.binToDec = function binToDec(chunk) {};


/**
 * @param {number} decNumber
 * @return {!Buffer}
 */
thrift.protocol.Int64.prototype.decToBin = function(decNumber) {};


/**
 * @return {!Buffer}
 */
thrift.protocol.Int64.prototype.getBuffer = function() {};


/**
 * @return {number}
 */
thrift.protocol.Int64.prototype.getNumber = function() {};


/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.MessageKeeperBase = function(protocol) {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.isComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.isHeaderComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.get = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.applyData = function(structure) {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.getType = function() {};


/**
 * @return {number}
 */
thrift.protocol.MessageKeeperBase.prototype.getId = function() {};


/**
 * @return {string}
 */
thrift.protocol.MessageKeeperBase.prototype.getName = function() {};


/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.ArrayKeeper = function(protocol) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.isHeaderComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.isComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.applyData = function(value) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.get = function() {};


/**
 * @return {number}
 */
thrift.protocol.binary.ArrayKeeper.prototype.getType = function() {};


/**
 * @return {number}
 */
thrift.protocol.binary.ArrayKeeper.prototype.getLength = function() {};


/**
 * @implements {thrift.IValueKeeper}
 * @constructor
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.FieldKeeper = function(protocol) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.isHeaderComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.applyData = function(value) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.isComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.get = function() {};


/**
 * @return {number}
 */
thrift.protocol.binary.FieldKeeper.prototype.getType = function() {};


/**
 * @return {number}
 */
thrift.protocol.binary.FieldKeeper.prototype.getId = function() {};


/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.MapKeeper = function(protocol) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.isHeaderComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.applyData = function(value) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.isComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.get = function() {};


/**
 * @return {number}
 */
thrift.protocol.binary.MapKeeper.prototype.getType = function() {};


/**
 * @constructor
 * @extends {thrift.protocol.MessageKeeperBase}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.MessageKeeper = function(protocol) {};


/**
 * @override
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.protocol.binary.MessageKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.StructureKeeper = function(protocol) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.isHeaderComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.applyData = function(field) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.isComplete = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.get = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.getType = function() {};


/**
 * @constructor
 * @extends {thrift.protocol.MessageKeeperBase}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.json.MessageKeeper = function(protocol) {};


/**
 * @enum {number}
 */
thrift.protocol.json.MessageKeeper.TYPE = {
  tf: thrift.definition.Type.BOOL,
  i8: thrift.definition.Type.I08,
  dbl: thrift.definition.Type.DOUBLE,
  i16: thrift.definition.Type.I16,
  i32: thrift.definition.Type.I32,
  i64: thrift.definition.Type.I64,
  str: thrift.definition.Type.STRING,
  rec: thrift.definition.Type.STRUCT,
  set: thrift.definition.Type.SET,
  map: thrift.definition.Type.MAP,
  lst: thrift.definition.Type.LIST
};


/**
 * @override
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.protocol.json.MessageKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @override
 *
 * @param {thrift.Value} value
 */
thrift.protocol.json.MessageKeeper.prototype.applyData = function(value) {};


/**
 * @typedef {!Buffer|string}
 */
thrift.protocol.collector.Data;


/**
 * @param {thrift.protocol.IProtocol} protocol
 *
 * @return {!thrift.protocol.collector.ICollector}
 */
thrift.protocol.collector.byProtocol = function(protocol) {};


/**
 * @interface
 */
thrift.protocol.collector.ICollector = function() {};


/**
 * @param {*} chunk
 */
thrift.protocol.collector.ICollector.prototype.push = function(chunk) {};


/**
 * @return {!Buffer}
 */
thrift.protocol.collector.ICollector.prototype.getTotal = function() {};


/**
 * @constructor
 * @implements {thrift.protocol.collector.ICollector}
 */
thrift.protocol.collector.Buffer = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Buffer.prototype.push = function(chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Buffer.prototype.getTotal = function() {};


/**
 * @constructor
 * @implements {thrift.protocol.collector.ICollector}
 */
thrift.protocol.collector.Array = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Array.prototype.push = function(chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Array.prototype.getTotal = function() {};




