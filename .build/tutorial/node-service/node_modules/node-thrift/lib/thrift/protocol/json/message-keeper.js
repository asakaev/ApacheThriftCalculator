


/**
 * @constructor
 * @extends {thrift.protocol.MessageKeeperBase}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.json.MessageKeeper = function(protocol) {
  thrift.protocol.MessageKeeperBase.call(this, protocol);

  /**
   * @type {thrift.Value}
   */
  this.__structure = {};
};

util.inherits(thrift.protocol.json.MessageKeeper,
    thrift.protocol.MessageKeeperBase);


/**
 * @enum {number}
 */
thrift.protocol.json.MessageKeeper.TYPE = {
  tf: thrift.definition.Type.BOOL,
  i8: thrift.definition.Type.I08,
  dbl: thrift.definition.Type.DOUBLE,
  i16: thrift.definition.Type.I16,
  i32: thrift.definition.Type.I32,
  i64: thrift.definition.Type.I64,
  str: thrift.definition.Type.STRING,
  rec: thrift.definition.Type.STRUCT,
  set: thrift.definition.Type.SET,
  map: thrift.definition.Type.MAP,
  lst: thrift.definition.Type.LIST
};


/**
 * @override
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.protocol.json.MessageKeeper.prototype.processHeader =
    function(cursor, chunk) {
  try {
    var message = JSON.parse(chunk.toString());

    if (message instanceof Array) {
      this.__name = message[1];
      this.__type = message[2];
      this.__id = message[3];
      this.__isHeaderComplete = true;

      this.__structure = this.__processStructure(message[4]);

      cursor.incrPosition(chunk.length);
    } else {
      cursor.breakParsing();
    }
  } catch (e) {
    cursor.breakParsing();
  }

};


/**
 * @override
 *
 * @param {thrift.Value} value
 */
thrift.protocol.json.MessageKeeper.prototype.applyData = function(value) {
  thrift.protocol.MessageKeeperBase.prototype.applyData.
      call(this, this.__structure);
};


/**
 * @param {thrift.Value} body
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processStructure =
    function(body) {
  var str = {};

  for (var key in body) {
    var field = this.__processField(body[key]);


    if (field !== null) {
      str[key] = field;
    }
  }
  return str;
};


/**
 * @param {thrift.Value} field
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processField = function(field) {
  if (field instanceof Object) {
    var type = Object.keys(field)[0];
    var value = field[type];

    type = thrift.protocol.json.MessageKeeper.TYPE[type];

    if (type) {
      return this.__processValue(type, value);
    }
  }

  return null;
};


/**
 * @param {thrift.Value} list
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processList = function(list) {
  if (list instanceof Array) {
    var arr = [];
    var type = thrift.protocol.json.MessageKeeper.TYPE[list[0]];
    list.splice(0, 2);

    for (var i = 0; i < list.length; i++) {
      arr.push(this.__processValue(type, list[i]));
    }
    return arr;
  }

  return null;
};


/**
 * @param {thrift.Value} map
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processMap = function(map) {
  if (map instanceof Array) {
    var result = {};
    var ktype = thrift.protocol.json.MessageKeeper.TYPE[map[0]];
    var vtype = thrift.protocol.json.MessageKeeper.TYPE[map[1]];
    var value = map[3];

    for (var key in value) {
      result[this.__processValue(ktype, key)] =
          this.__processValue(vtype, value[key]);
    }
    return result;
  }

  return null;
};


/**
 * @param {thrift.Value} value
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processSimple = function(value) {
  return value;
};


/**
 * @param {thrift.definition.Type} type
 * @param {thrift.Value} value
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processValue =
    function(type, value) {
  switch (type) {
    case thrift.definition.Type.STRUCT:
      return this.__processStructure(value);

    case thrift.definition.Type.LIST:
    case thrift.definition.Type.SET:
      return this.__processList(value);

    case thrift.definition.Type.MAP:
      return this.__processMap(value);

    case thrift.definition.Type.BOOL:
    case thrift.definition.Type.I08:
    case thrift.definition.Type.DOUBLE:
    case thrift.definition.Type.I16:
    case thrift.definition.Type.I32:
    case thrift.definition.Type.I64:
    case thrift.definition.Type.STRING:
      return this.__processSimple(value);

    default:
      return null;
  }
};
