


/**
 * @constructor
 *
 * @param {!Buffer|number} int64
 */
thrift.protocol.Int64 = function(int64) {

  /**
   * @type {!Buffer}
   */
  this.__bytes = new Buffer(0);

  /**
   * @type {number}
   */
  this.__number = 0;

  if (int64 instanceof Buffer) {
    this.__bytes = int64;
    this.__number = this.binToDec(int64);
  } else {
    this.__bytes = this.decToBin(int64);
    this.__number = int64;
  }
};


/**
 * @type {number}
 */
thrift.protocol.Int64.prototype.MAX_VALUE = Math.pow(2, 53);


/**
 * @type {number}
 */
thrift.protocol.Int64.prototype.__MASK_32 = 0x100000000;


/**
 * @param {Buffer} chunk
 * @return {number}
 */
thrift.protocol.Int64.prototype.binToDec = function binToDec(chunk) {
  var negative = chunk[0] & 0x80;
  var dop = 1;
  var byte = 0;
  var value = 0;

  for (var i = 7; i >= 0; i--) {
    byte = chunk[i];

    if (negative) {
      byte = (byte ^ 0xff) + dop;
      dop = byte >> 8;
      byte = byte & 0xff;
    }
    value += byte * Math.pow(2, 8 * (7 - i));
  }

  if (value >= this.MAX_VALUE) {
    console.warn('Integer is outside range [thrift.protocol.Int64.binToDec]');
    value = Infinity;
  }

  return negative ? -value : value;
};


/**
 * @param {number} decNumber
 * @return {!Buffer}
 */
thrift.protocol.Int64.prototype.decToBin = function(decNumber) {
  var hight = Math.abs(decNumber) / this.__MASK_32;
  var low = Math.abs(decNumber) % this.__MASK_32;

  if (hight > this.__MASK_32) {
    console.warn('Integer is outside range [thrift.protocol.Int64.decToBin]');
  }

  var value = new Buffer(8);

  for (var i = 7; i >= 0; i--) {
    value[i] = low & 0xff;
    low = i == 4 ? hight : low >>> 8;
  }

  if (decNumber < 0) {
    var dop = 1;
    for (i = 7; i >= 0; i--) {
      var byte = (value[i] ^ 0xff) + dop;
      value[i] = byte & 0xff;
      dop = byte >> 8;
    }
  }

  return value;
};


/**
 * @return {!Buffer}
 */
thrift.protocol.Int64.prototype.getBuffer = function() {
  return this.__bytes;
};


/**
 * @return {number}
 */
thrift.protocol.Int64.prototype.getNumber = function() {
  return this.__number;
};

