


/**
 * @interface
 */
thrift.protocol.IProtocol = function() {};


/**
 * @return {!thrift.ISchema}
 */
thrift.protocol.IProtocol.prototype.getIdl = function() {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} userStructure
 * @param {!string} type
 */
thrift.protocol.IProtocol.prototype.serializeStructure =
    function(collector, userStructure, type) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} array
 * @param {!thrift.definition.FullType} valInfo
 */
thrift.protocol.IProtocol.prototype.serializeArray =
    function(collector, array, valInfo) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} map
 * @param {!thrift.definition.FullType} keyInfo
 * @param {!thrift.definition.FullType} valInfo
 */
thrift.protocol.IProtocol.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {string} methodName
 * @param {number} type
 * @param {number} seqid
 */
thrift.protocol.IProtocol.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} id
 */
thrift.protocol.IProtocol.prototype.writeFieldHeader =
    function(collector, type, id) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 */
thrift.protocol.IProtocol.prototype.writeFieldStop = function(collector) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 */
thrift.protocol.IProtocol.prototype.writeStructureStop = function(collector) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} ktype
 * @param {number} vtype
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeMapHeader =
    function(collector, ktype, vtype, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeListHeader =
    function(collector, type, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeSetHeader =
    function(collector, type, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {boolean} value
 */
thrift.protocol.IProtocol.prototype.writeBool = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeByte = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeI16 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeI32 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {thrift.protocol.Int64|number} value
 */
thrift.protocol.IProtocol.prototype.writeI64 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeDouble = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {string} value
 */
thrift.protocol.IProtocol.prototype.writeString = function(collector, value) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {boolean}
 */
thrift.protocol.IProtocol.prototype.readBool = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readByte = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readI16 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readI32 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {thrift.protocol.Int64}
 */
thrift.protocol.IProtocol.prototype.readI64 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readDouble = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {string}
 */
thrift.protocol.IProtocol.prototype.readString = function(cursor, chunk) {};


/**
 * @return {thrift.protocol.Type}
 */
thrift.protocol.IProtocol.prototype.getType = function() {};
