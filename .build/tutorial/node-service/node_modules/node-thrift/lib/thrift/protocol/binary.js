


/**
 * @constructor
 * @implements {thrift.protocol.IProtocol}
 * @param {!thrift.ISchema} idl
 */
thrift.protocol.Binary = function(idl) {

  /**
   * @type {!thrift.ISchema}
   */
  this.__idl = idl;
};


/**
 * @type {number} 0x80010000
 */
thrift.protocol.Binary.prototype.VERSION = -2147418112;


/**
 * @type {number} -65536
 */
thrift.protocol.Binary.prototype.VERSION_MASK = 0xffff0000;


/**
 * @type {number}
 */
thrift.protocol.Binary.prototype.TYPE_MASK = 0x000000ff;


/**
 * @return {!thrift.ISchema}
 */
thrift.protocol.Binary.prototype.getIdl = function() {
  return this.__idl;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {
  this.writeI32(collector, this.VERSION | type);
  this.writeString(collector, methodName);
  this.writeI32(collector, seqid);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeStructure =
    function(collector, userStructure, type) {
  var structureInfo = this.__idl.getStructureDefinition(type);
  var structure = userStructure.toThrift();
  if (structureInfo !== null) {
    for (var field in structure) {
      if (structure.hasOwnProperty(field) &&
          structure[field] !== undefined &&
          structure[field] !== null) {
        var typeInfo = structureInfo.getTypeByName(field);
        var id = structureInfo.getIdByName(field);

        this.writeFieldHeader(collector, typeInfo.getType(), id);
        thrift.serializeValue(collector, structure[field], typeInfo, this);
      }
    }
  }

  this.writeStructureStop(collector);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {

  var size = Object.keys(map).length;

  this.writeMapHeader(collector, keyInfo.getType(), valInfo.getType(), size);
  for (var key in map) {
    if (map.hasOwnProperty(key)) {
      thrift.serializeValue(collector, key, keyInfo, this);
      thrift.serializeValue(collector, map[key], valInfo, this);
    }
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeArray =
    function(collector, array, fullValueType) {

  this.writeListHeader(collector, fullValueType.getType(), array.length);

  for (var i = 0; i < array.length; i++) {
    if (array[i] !== undefined) {
      thrift.serializeValue(collector, array[i], fullValueType, this);
    }
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeFieldHeader =
    function(collector, type, id) {
  this.writeByte(collector, type);
  this.writeI16(collector, id);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeFieldStop = function(collector) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeStructureStop = function(collector) {
  this.writeByte(collector, 0);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeMapHeader =
    function(collector, ktype, vtype, size) {
  this.writeByte(collector, ktype);
  this.writeByte(collector, vtype);
  this.writeI32(collector, size);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeListHeader =
    function(collector, etype, size) {
  this.writeByte(collector, etype);
  this.writeI32(collector, size);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeSetHeader =
    function(collector, etype, size) {
  this.writeByte(collector, etype);
  this.writeI32(collector, size);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeBool = function(collector, bool) {
  bool ? this.writeByte(collector, 1) : this.writeByte(collector, 0);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeByte = function(collector, value) {
  //collector.push(new Buffer(String.fromCharCode(value)));
  collector.push(new Buffer([value]));
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI16 = function(collector, value) {
  var output = new Buffer(2);
  output[1] = value & 0xff;
  value >>= 8;
  output[0] = value & 0xff;

  collector.push(output);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI32 = function(collector, value) {
  var output = new Buffer(4);
  output[3] = value & 0xff;
  value >>= 8;
  output[2] = value & 0xff;
  value >>= 8;
  output[1] = value & 0xff;
  value >>= 8;
  output[0] = value & 0xff;

  collector.push(output);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI64 = function(collector, value) {
  if (typeof value === 'number') {
    value = new thrift.protocol.Int64(value);
  }

  collector.push(value.getBuffer());
};


/**
 *
 *
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeDouble = function(collector, double) {
  var value = new Buffer(8);
  var mant = 0;
  var exp = Math.floor(Math.log(double) / Math.LN2);
  var c = Math.pow(2, -exp);
  double = Math.abs(double);

  value[0] = double < 0 ? 0x80 : 0x00;

  if (double * c < 1) {
    exp--;
    c *= 2;
  }

  if (exp + 1023 >= 2047) {
    mant = 0;
    exp = 2047;
  } else if (exp + 1023 >= 1) {
    mant = (double * c - 1) * Math.pow(2, 52);
    exp += 1023;
  } else {
    mant = (double * Math.pow(2, 1022)) * Math.pow(2, 52);
    exp = 0;
  }

  value[1] = (exp << 4) & 0xf0;
  value[0] |= (exp >> 4) & 0x7f;

  value[7] = mant & 0xff;
  mant >>= 8;
  value[6] = mant & 0xff;
  mant >>= 8;
  value[5] = mant & 0xff;
  mant >>= 8;
  value[4] = mant & 0xff;
  mant >>= 8;
  value[3] = mant & 0xff;
  mant >>= 8;
  value[2] = mant & 0xff;
  mant >>= 8;
  value[1] |= mant & 0x0f;

  collector.push(value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeString = function(collector, value) {
  this.writeI32(collector, Buffer.byteLength(value));
  collector.push(new Buffer(value));
};


/**
 * @inheritDoc
 */

thrift.protocol.Binary.prototype.readBool = function(cursor, chunk) {
  return this.readByte(cursor, chunk) ? true : false;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readByte = function(cursor, chunk) {
  var value = 0;
  if (cursor.getPosition() < chunk.length) {
    value = chunk[cursor.getPosition()];
    cursor.incrPosition(1);
  } else {
    cursor.breakParsing();
  }

  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI16 = function(cursor, chunk) {
  var value = 0;
  if ((cursor.getPosition() + 1) < chunk.length) {
    value = chunk[cursor.getPosition() + 1];
    value += chunk[cursor.getPosition()] << 8;

    if (chunk[cursor.getPosition()] & 128) {
      value -= Math.pow(2, 16);
    }

    cursor.incrPosition(2);
  } else {
    cursor.breakParsing();
  }
  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI32 = function(cursor, chunk) {
  var value = 0;
  if ((cursor.getPosition() + 3) < chunk.length) {

    value = chunk[cursor.getPosition() + 3];
    value += chunk[cursor.getPosition() + 2] << 8;
    value += chunk[cursor.getPosition() + 1] << 16;
    value += chunk[cursor.getPosition()] << 24;

    if (chunk[cursor.getPosition()] & 0x80) {
      value -= Math.pow(2, 32);
    }

    cursor.incrPosition(4);
  } else {
    cursor.breakParsing();
  }
  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI64 = function(cursor, chunk) {
  var value = null;
  if ((cursor.getPosition() + 7) < chunk.length) {
    value = new thrift.protocol.Int64(
        chunk.slice(cursor.getPosition(), cursor.getPosition() + 8));
    cursor.incrPosition(8);
  } else {
    cursor.breakParsing();
  }

  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readDouble = function(cursor, chunk) {
  if ((cursor.getPosition() + 7) < chunk.length) {

    var signed = chunk[cursor.getPosition()] & 0x80;
    var e = (chunk[cursor.getPosition() + 1] & 0xF0) >> 4;
    e += (chunk[cursor.getPosition()] & 0x7F) << 4;

    var m = chunk[cursor.getPosition() + 7];
    m += chunk[cursor.getPosition() + 6] << 8;
    m += chunk[cursor.getPosition() + 5] << 16;
    m += chunk[cursor.getPosition() + 4] * Math.pow(2, 24);
    m += chunk[cursor.getPosition() + 3] * Math.pow(2, 32);
    m += chunk[cursor.getPosition() + 2] * Math.pow(2, 40);
    m += (chunk[cursor.getPosition() + 1] & 0x0F) * Math.pow(2, 48);

    switch (e) {
      case 0:
        e = -1022;
        break;
      case 2047:
        return m ? NaN : (signed ? -Infinity : Infinity);
      default:
        m += Math.pow(2, 52);
        e -= 1023;
    }

    if (signed) {
      m *= -1;
    }

    cursor.incrPosition(8);
  } else {
    cursor.breakParsing();
  }

  return m * Math.pow(2, e - 52);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readString = function(cursor, chunk) {
  var out = '';
  var len = this.readI32(cursor, chunk);

  if (cursor.isParsed()) {
    if (cursor.getPosition() + len <= chunk.length) {
      out = chunk.toString('utf8', cursor.getPosition(),
              cursor.getPosition() + len);
      cursor.incrPosition(len);
    } else {
      cursor.incrPosition(-4);
      cursor.breakParsing();
    }
  }

  return out;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.getType = function() {
  return thrift.protocol.Type.BINARY;
};
