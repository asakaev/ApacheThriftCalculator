


/**
 * @constructor
 * @extends {thrift.protocol.MessageKeeperBase}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.MessageKeeper = function(protocol) {
  thrift.protocol.MessageKeeperBase.call(this, protocol);
};

util.inherits(thrift.protocol.binary.MessageKeeper,
    thrift.protocol.MessageKeeperBase);


/**
 * @override
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.protocol.binary.MessageKeeper.prototype.processHeader =
    function(cursor, chunk) {

  if (this.__type === 0) {
    var info = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__type = info & this.__protocol.TYPE_MASK;
    }
  }

  if (cursor.isParsed() && this.__name === '') {
    var name = this.__protocol.readString(cursor, chunk);
    if (cursor.isParsed()) {
      this.__name = name;
    }
  }

  if (cursor.isParsed() && this.__id === -1) {
    var id = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__id = id;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};
