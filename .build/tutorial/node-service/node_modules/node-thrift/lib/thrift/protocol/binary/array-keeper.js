


/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.ArrayKeeper = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {number}
   */
  this.__type = -1;

  /**
   * @type {number}
   */
  this.__length = 0;

  /**
   * @type {!Array}
   */
  this.__result = [];

  /**
   * @type {boolean}
   */
  this.__isHeaderComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.isHeaderComplete = function() {
  return this.__isHeaderComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.processHeader =
    function(cursor, chunk) {
  if (this.__type === -1) {
    var type = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__type = type;
    }
  }

  if (cursor.isParsed()) {
    var length = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__length = length;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.isComplete = function() {
  return this.__length === this.__result.length;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.applyData = function(value) {
  this.__result.push(value);
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.get = function() {
  return this.__result;
};


/**
 * @return {number}
 */
thrift.protocol.binary.ArrayKeeper.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {number}
 */
thrift.protocol.binary.ArrayKeeper.prototype.getLength = function() {
  return this.__length;
};
