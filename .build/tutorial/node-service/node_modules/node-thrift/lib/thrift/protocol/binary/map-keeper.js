


/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.MapKeeper = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!Object}
   */
  this.__result = {};

  /**
   * @type {number}
   */
  this.__ktype = thrift.definition.Type.NOP;

  /**
   * @type {number}
   */
  this.__vtype = thrift.definition.Type.NOP;

  /**
   * @type {number}
   */
  this.__size = 0;

  /**
   * @type {!thrift.Value}
   */
  this.__key = null;

  /**
   * @type {number}
   */
  this.__pairCount = 0;

  /**
   * @type {number}
   */
  this.__curentType = this.__ktype;

  /**
   * @type {boolean}
   */
  this.__isHeaderComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.isHeaderComplete = function() {
  return this.__isHeaderComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.processHeader =
    function(cursor, chunk) {
  if (this.__ktype === -1) {
    var ktype = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__ktype = ktype;
      this.__curentType = ktype;
    }
  }

  if (cursor.isParsed() && this.__vtype === -1) {
    var vtype = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__vtype = vtype;
    }
  }

  if (cursor.isParsed()) {
    var size = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__size = size;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.applyData = function(value) {
  if (this.__key === null) {
    this.__key = value;
    this.__curentType = this.__vtype;
  } else {
    this.__result[this.__key] = value;
    this.__key = null;
    this.__curentType = this.__ktype;
    this.__pairCount++;
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.isComplete = function() {
  return this.__pairCount === this.__size;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.get = function() {
  return this.__result;
};


/**
 * @return {number}
 */
thrift.protocol.binary.MapKeeper.prototype.getType = function() {
  return this.__curentType;
};
