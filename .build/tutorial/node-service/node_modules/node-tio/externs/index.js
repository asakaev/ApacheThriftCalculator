/**
 * @namespace
 */
var tio = {};


/**
 * @namespace
 */
tio.client = {};


/**
 * @namespace
 */
tio.listener = {};


/**
 * @namespace
 */
tio.process = {};


/**
 * @namespace
 */
tio.process.api = {};


/**
 * @namespace
 */
tio.thrift = {};


/**
 * @interface
 */
tio.listener.IProtocol = function() {};


/**
 * @param {!http.IncomingMessage} request
 * @param {!function(!tio.thrift.Message)} apply
 * @param {!yaa.ErrorHandler} cancel
 */
tio.listener.IProtocol.prototype.process =
    function(request, apply, cancel) {};


/**
 * @param {!http.ServerResponse} response
 * @param {!tio.thrift.Message} message
 * @param {!Arguments} result
 */
tio.listener.IProtocol.prototype.complete =
    function(response, message, result) {};


/**
 * @param {!http.ServerResponse} response
 * @param {yaa.Error} error
 * @param {!tio.thrift.Message=} opt_message
 */
tio.listener.IProtocol.prototype.cancel =
    function(response, error, opt_message) {};


/**
 * @interface
 */
tio.listener.IRouter = function() {};


/**
 * @param {function(!yaa.api.ISession)} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!tio.thrift.Message} call
 */
tio.listener.IRouter.prototype.session = function(complete, cancel, call) {};


/**
 * @param {!tio.thrift.Message} call
 * @return {!yaa.Step}
 */
tio.listener.IRouter.prototype.step = function(call) {};


/**
 * @param {!tio.thrift.Message} call
 * @return {boolean}
 */
tio.listener.IRouter.prototype.stateful = function(call) {};


/**
 * @typedef {?function(!http.IncomingMessage, !http.ServerResponse)}
 */
tio.listener.Processor;


/**
 * @param {!tio.listener.IProtocol} protocol
 * @param {!tio.listener.IRouter} router
 * @return {!tio.listener.Processor}
 */
tio.listener.listen = function(protocol, router) {};


/**
 * @typedef {{
 *   hostname: string,
 *   port: number,
 *   path: string
 * }}
 */
tio.client.HttpOptions;


/**
 * @param {number} port
 * @param {string} host
 */
tio.client.init = function(port, host) {};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {string} name
 * @param {string} version
 * @param {string} type
 * @return {!yaa.api.client.Provider}
 */
tio.client.http = function(protocol, name, version, type) {};


/**
 * @constructor
 * @implements {tio.listener.IProtocol}
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!tio.thrift.HeaderOptions=} opt_options
 */
tio.thrift.Protocol = function(protocol, opt_options) {};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.process = function(request, apply, cancel) {};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.complete = function(response, message, result) {};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.cancel =
    function(response, error, opt_message) {};


/**
 * @constructor
 * @param {number} id
 * @param {string} name
 * @param {!Array} args
 * @param {!Object.<string, string>} headers
 */
tio.thrift.Message = function(id, name, args, headers) {};


/**
 * @return {!Array}
 */
tio.thrift.Message.prototype.getArgs = function() {};


/**
 * @return {string}
 */
tio.thrift.Message.prototype.getName = function() {};


/**
 * @return {number}
 */
tio.thrift.Message.prototype.getId = function() {};


/**
 * @return {!Object.<string, string>}
 */
tio.thrift.Message.prototype.getHeaders = function() {};


/**
 * @param {string} name
 * @return {string}
 */
tio.thrift.Message.prototype.getHeader = function(name) {};


/**
 * @inheritDoc
 */
tio.thrift.Message.prototype.toString = function() {};


/**
 * @typedef {?function(!Object.<string, string>):!Object.<string, string>}
 */
tio.thrift.HeadersFilter;


/**
 * @typedef {?{
 *   installer: !tio.thrift.HeadersFilter,
 *   extractor: !tio.thrift.HeadersFilter
 * }}
 */
tio.thrift.HeaderOptions;


/**
 * @param {function(!tio.thrift.Message)} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!http.IncomingMessage} stream
 * @param {!tio.thrift.HeadersFilter=} opt_headerExtractor
 */
tio.thrift.decode = function(complete, cancel, protocol, stream,
                             opt_headerExtractor) {};


/**
 * @return {!yaa.Step}
 */
tio.process.api.init = function() {};


/**
 * @return {!yaa.Step}
 */
tio.process.api.destroy = function() {};


/**
 * @return {!yaa.Step}
 */
tio.process.api.reload = function() {};


/**
 * @constructor
 * @param {!tio.process.Endpoint} endpoint
 * @param {!tio.process.Worker} worker
 */
tio.process.api.Context = function(endpoint, worker) {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.api.Context.prototype.init = function(complete, cancel) {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.api.Context.prototype.destroy = function(complete, cancel) {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.api.Context.prototype.listen = function(complete, cancel) {};


/**
 * @constructor
 * @param {number} port
 * @param {string} host
 */
tio.process.Endpoint = function(port, host) {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {function(!http.IncomingMessage, !http.ServerResponse)} listener
 */
tio.process.Endpoint.prototype.listen = function(complete, cancel, listener) {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Endpoint.prototype.close = function(complete, cancel) {};


/**
 * @param {!tio.process.Endpoint} endpoint
 * @param {!tio.process.Worker} worker
 */
tio.process.init = function(endpoint, worker) {};


/**
 *
 */
tio.process.reload = function() {};


/**
 *
 */
tio.process.destroy = function() {};


/**
 * @constructor
 * @param {!tio.process.IWorker} worker
 */
tio.process.Worker = function(worker) {};


/**
 * @return {!tio.listener.Processor}
 */
tio.process.Worker.prototype.listener = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Worker.prototype.init = function(complete, cancel) {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Worker.prototype.destroy = function(complete, cancel) {};


/**
 * @interface
 */
tio.process.IWorker = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.IWorker.prototype.init = function(complete, cancel) {};


/**
 * @return {!tio.listener.IRouter}
 */
tio.process.IWorker.prototype.router = function() {};


/**
 * @return {!tio.listener.IProtocol}
 */
tio.process.IWorker.prototype.protocol = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.IWorker.prototype.destroy = function(complete, cancel) {};




