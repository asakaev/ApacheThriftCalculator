var yaa = require('../../../bin/index.js');
var test = require('../../test.js');
var cases = [];
var context = {};

module.exports = test(cases, __filename.substr(__dirname.length + 1), context);


/**
 * @param {string} key
 * @return {!yaa.Step}
 */
function markContext(key) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {yaa.Input} value
   */
  function markContext(complete, cancel, value) {
    this[key] = value;
    complete();
  }

  return markContext;
}


cases.push(yaa.assert.outputEquals(
    yaa.use(yaa.proc.once(yaa.nop(), yaa.yes()), yaa.no()),
    yaa.no(), 'Proc method proxy input.'));


cases.push(yaa.assert.outputEquals(
    yaa.use(yaa.proc.once(yaa.nop(), yaa.yes(), yaa.insert(context)), yaa.no()),
    yaa.insert(context), 'Proc method return output.'));


cases.push(yaa.bind(yaa.sequence([
  yaa.proc.once(markContext('done'), yaa.yes()),
  yaa.assert.contextDeepEquals({
    'done': true
  }, 'Context correct.')
]), {}));



cases.push(yaa.bind(yaa.sequence([
  yaa.proc.once(markContext('done'), yaa.no()),
  yaa.assert.contextDeepEquals({
    'done': false
  }, 'Context correct.')
]), {}));


cases.push(yaa.bind(yaa.sequence([
  yaa.insert(1569),
  yaa.proc.once(markContext('done'), yaa.nop()),
  yaa.assert.contextDeepEquals({
    'done': 1569
  }, 'Context correct.')
]), {}));


cases.push(yaa.bind(yaa.sequence([
  yaa.proc.once(markContext('done'), yaa.nothing()),
  yaa.assert.contextDeepEquals({}, 'Context correct.')
]), {}));
