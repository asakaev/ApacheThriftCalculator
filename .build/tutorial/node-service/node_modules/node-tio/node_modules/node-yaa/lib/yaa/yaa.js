

/**
 * @namespace
 */
var yaa = {};


/**
 * @namespace
 */
yaa.api = {};


/**
 * @namespace
 */
yaa.api.client = {};


/**
 * @namespace
 */
yaa.assert = {};


/**
 * @namespace
 */
yaa.collector = {};


/**
 * @namespace
 */
yaa.iterator = {};


/**
 * @namespace
 */
yaa.proc = {};


/**
 * @namespace
 */
yaa.proc.fold = {};


/**
 * @typedef {Object}
 */
yaa.Context;


/**
 * @typedef {*}
 */
yaa.Input;


/**
 * @typedef {*}
 */
yaa.Output;


/**
 * @typedef {*}
 */
yaa.Error;


/**
 * @typedef {?function(yaa.Error)}
 */
yaa.ErrorHandler;


/**
 * @typedef {?function(...yaa.Output)}
 */
yaa.CompleteHandler;


/**
 * @typedef {yaa.IStep|?function(
 *    !yaa.CompleteHandler, !yaa.ErrorHandler, ...yaa.Input)}
 */
yaa.Step;


/**
 * @typedef {yaa.IStep|?function(
 *    function(boolean), !yaa.ErrorHandler, ...yaa.Input)}
 */
yaa.Condition;


/**
 * @typedef {yaa.Step}
 */
yaa.State;


/**
 * @param {...yaa.Output} var_args
 */
yaa.complete = function(var_args) {};


/**
 * @param {yaa.Error} error
 */
yaa.cancel = function(error) {};


/**
 * @param {yaa.Error} error
 * @return {!yaa.Step}
 */
yaa.error = function(error) {

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function err(complete, cancel) {
    cancel(error);
  }

  return err;
};


/**
 * @param {...yaa.Input} var_args
 * @return {!yaa.Step}
 */
yaa.insert = function(var_args) {
  var output = arguments;

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function insert(complete, cancel) {
    complete(output[0]);
  }

  return insert;
};


/**
 * @param {!yaa.Step} step
 * @param {yaa.Context} context
 * @return {!yaa.Step}
 */
yaa.bind = function(step, context) {

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function bind(complete, cancel) {
    step.call(context, complete, cancel, arguments[2]);
  }

  return bind;
};


/**
 * @return {!yaa.Step}
 */
yaa.nop = function() {
  return yaa.__nop;
};


/**
 * @return {!yaa.Step}
 */
yaa.yes = function() {
  return yaa.__yes;
};


/**
 * @return {!yaa.Step}
 */
yaa.no = function() {
  return yaa.__no;
};


/**
 * @return {!yaa.Step}
 */
yaa.nothing = function() {
  return yaa.__nothing;
};


/**
 * @param {!yaa.Step} left
 * @param {!yaa.Step} right
 * @return {!yaa.Step}
 */
yaa.pair = function(left, right) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function pair(complete, cancel, var_args) {
    var output = null;

    /**
     * @param {...yaa.Output} var_args
     */
    function handleLeft(var_args) {
      if (output === null) {
        yaa.__leftArgs(output = [], arguments);
      } else {
        yaa.__leftArgs(output, arguments);

        complete(output[0]);
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleRight(var_args) {
      if (output === null) {
        yaa.__rightArgs(output = [], arguments);
      } else {
        yaa.__rightArgs(output, arguments);

        complete(output[0]);
      }
    }

    left.call(this, handleLeft, cancel, arguments[2]);
    right.call(this, handleRight, cancel, arguments[2]);
  }

  return pair;
};


/**
 * @param {!(yaa.Step|Array.<!yaa.Step>)=} opt_steps
 * @param {...!yaa.Step} var_args
 * @return {!yaa.Step}
 */
yaa.join = function(opt_steps, var_args) {
  var steps = opt_steps instanceof Array ? opt_steps : arguments;
  var join = steps[0] || yaa.__nothing;

  for (var i = 1; i < steps.length; i += 1) {
    join = yaa.pair(join, steps[i]);
  }

  return join;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @return {!yaa.Step}
 */
yaa.use = function(handler, source) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function use(complete, cancel, var_args) {
    var context = this;

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      handler.call(context, complete, cancel, arguments[0]);
    }

    source.call(context, handleSource, cancel, arguments[2]);
  }

  return use;
};


/**
 * @param {!(yaa.Step|Array.<!yaa.Step>)=} opt_steps
 * @param {...!yaa.Step} var_args
 * @return {!yaa.Step}
 */
yaa.sequence = function(opt_steps, var_args) {
  var steps = opt_steps instanceof Array ? opt_steps : arguments;

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function sequence(complete, cancel, var_args) {
    var context = this;
    var l = steps.length - 1;
    var i = -1;

    /**
     * @param {yaa.Error} error Ошибка.
     */
    function localCancel(error) {
      i = l;
      l -= 1;

      cancel(error);
    }

    /**
     * @param {...yaa.Input} var_args
     */
    function localComplete(var_args) {
      if (i < l) {
        steps[i += 1].call(context, localComplete, localCancel, arguments[0]);
      } else if (i === l) {
        complete(arguments[0]);
      }
    }

    localComplete(arguments[2]);
  }

  return sequence;
};


/**
 * @param {!yaa.Condition} condition
 * @param {!yaa.Step} then
 * @param {!yaa.Step=} opt_else
 * @return {!yaa.Step}
 */
yaa.if = function(condition, then, opt_else) {
  var elseStep = opt_else || yaa.__nop;

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function step(complete, cancel, var_args) {
    var input = arguments;
    var context = this;

    /**
     * @param {boolean} result
     */
    function handleCondition(result) {
      if (result) {
        then.call(context, complete, cancel, input[2]);
      } else {
        elseStep.call(context, complete, cancel, input[2]);
      }
    }

    condition.call(context, handleCondition, cancel, input[2]);
  }

  return step;
};


/**
 /**
 * @param {function(...)} step
 * @return {!yaa.Step}
 *
 */
yaa.esc = function(step) {
  return step;
};


/**
 * @param {Array} output
 * @param {!Arguments} args
 */
yaa.__rightArgs = function(output, args) {
  var l = args.length - 1;

  while (l >= 0) {
    if (args[l] !== undefined) {
      break;
    }

    l -= 1;
  }

  for (var i = 0; i <= l; i += 1) {
    output.push(args[i]);
  }
};


/**
 * @param {Array} output
 * @param {!Arguments} args
 */
yaa.__leftArgs = function(output, args) {
  var l = args.length - 1;

  while (l >= 0) {
    if (args[l] !== undefined) {
      break;
    }

    l -= 1;
  }

  for (var i = l; i >= 0; i -= 1) {
    output.unshift(args[i]);
  }
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {...yaa.Input} var_args
 */
yaa.__nop = function(complete, cancel, var_args) {
  complete(arguments[2]);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
yaa.__yes = function(complete, cancel) {
  complete(true);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
yaa.__no = function(complete, cancel) {
  complete(false);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
yaa.__nothing = function(complete, cancel) {
  complete();
};
