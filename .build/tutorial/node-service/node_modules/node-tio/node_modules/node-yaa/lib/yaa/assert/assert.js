

/**
 * @param {!yaa.Step} step
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.fail = function(step, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {

    /**
     * @param {...yaa.Output} var_args
     */
    function localComplete(var_args) {
      cancel(message);
    }

    /**
     * @param {yaa.Error} error
     */
    function localCancel(error) {
      complete();
    }

    step.call(this, localComplete, localCancel);
  }

  return assert;
};


/**
 * @param {yaa.Context} context
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.contextEquals = function(context, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    if (this === context) {
      complete();
    } else {
      cancel(message);
    }
  }

  return assert;
};


/**
 * @param {yaa.Context} context
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.contextDeepEquals = function(context, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    if (JSON.stringify(this) !== JSON.stringify(context)) {
      cancel(message);
    } else {
      complete();
    }
  }

  return assert;
};


/**
 * @param {!yaa.Step|!Array} left
 * @param {!yaa.Step|!Array} right
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.outputDeepEquals = function(left, right, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    var output = null;

    /**
     * @param {!Arguments} args
     */
    function localComplete(args) {
      if (JSON.stringify(output) !== JSON.stringify(args)) {
        cancel(message);
      } else {
        complete();
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleOutput(var_args) {
      if (output === null) {
        output = arguments;
      } else {
        localComplete(arguments);
      }
    }

    if (left instanceof Array) {
      handleOutput.apply(null, left);
    } else {
      left.call(this, handleOutput, cancel);
    }

    if (right instanceof Array) {
      handleOutput.apply(null, right);
    } else {
      right.call(this, handleOutput, cancel);
    }
  }

  return assert;
};


/**
 * @param {!yaa.Step|!Array} left
 * @param {!yaa.Step|!Array} right
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.outputEquals = function(left, right, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    var output = null;

    /**
     * @param {!Arguments|Array} args
     */
    function localComplete(args) {
      var l = Math.max(output.length, args.length);
      var i = 0;


      while (i < l) {
        if (args[i] != output[i]) {
          break;
        }

        i += 1;
      }

      if (i < l) {
        cancel(message);
      } else {
        complete();
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleOutput(var_args) {
      if (output === null) {
        output = arguments;
      } else {
        localComplete(arguments);
      }
    }

    if (left instanceof Array) {
      localComplete(left);
    } else {
      left.call(this, handleOutput, cancel);
    }

    if (right instanceof Array) {
      localComplete(right);
    } else {
      right.call(this, handleOutput, cancel);
    }
  }

  return assert;
};
