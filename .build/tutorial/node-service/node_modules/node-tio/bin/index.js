var yaa = require('node-yaa');
var thrift = require('node-thrift');
var http = require('http');

/**
 * @namespace
 */
var tio = {};


/**
 * @namespace
 */
tio.client = {};


/**
 * @namespace
 */
tio.listener = {};


/**
 * @namespace
 */
tio.process = {};


/**
 * @namespace
 */
tio.process.api = {};


/**
 * @namespace
 */
tio.thrift = {};



/**
 * @interface
 */
tio.listener.IProtocol = function() {};


/**
 * @param {!http.IncomingMessage} request
 * @param {!function(!tio.thrift.Message)} apply
 * @param {!yaa.ErrorHandler} cancel
 */
tio.listener.IProtocol.prototype.process =
    function(request, apply, cancel) {};


/**
 * @param {!http.ServerResponse} response
 * @param {!tio.thrift.Message} message
 * @param {!Arguments} result
 */
tio.listener.IProtocol.prototype.complete =
    function(response, message, result) {};


/**
 * @param {!http.ServerResponse} response
 * @param {yaa.Error} error
 * @param {!tio.thrift.Message=} opt_message
 */
tio.listener.IProtocol.prototype.cancel =
    function(response, error, opt_message) {};



/**
 * @interface
 */
tio.listener.IRouter = function() {};


/**
 * @param {function(!yaa.api.ISession)} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!tio.thrift.Message} call
 */
tio.listener.IRouter.prototype.session = function(complete, cancel, call) {};


/**
 * @param {!tio.thrift.Message} call
 * @return {!yaa.Step}
 */
tio.listener.IRouter.prototype.step = function(call) {};


/**
 * @param {!tio.thrift.Message} call
 * @return {boolean}
 */
tio.listener.IRouter.prototype.stateful = function(call) {};


/**
 * @typedef {?function(!http.IncomingMessage, !http.ServerResponse)}
 */
tio.listener.Processor;


/**
 * @param {!tio.listener.IProtocol} protocol
 * @param {!tio.listener.IRouter} router
 * @return {!tio.listener.Processor}
 */
tio.listener.listen = function(protocol, router) {
  var scheduler = tio.listener.__scheduler(router);

  /**
   * @param {!http.IncomingMessage} request
   * @param {!http.ServerResponse} response
   */
  function listen(request, response) {

    /**
     * @param {yaa.Error} error
     */
    function cancel(error) {
      console.warn('Unable to decode request "' + error + '".');
      protocol.cancel(response, error);
    }

    protocol.process(request, tio.listener.__processor(
        protocol, response, scheduler), cancel);
  }

  return listen;
};


/**
 * @param {!tio.listener.IProtocol} protocol
 * @param {!http.ServerResponse} response
 * @param {!yaa.Step} scheduler
 * @return {function(!tio.thrift.Message)}
 */
tio.listener.__processor = function(protocol, response, scheduler) {

  /**
   * @param {!tio.thrift.Message} call
   */
  function processor(call) {
    function complete() {
      protocol.complete(response, call, arguments);
    }

    /**
     * @param {yaa.Error} error
     */
    function cancel(error) {
      console.warn('Error processing request "' +
          call + '": "' + error + '".');

      protocol.cancel(response, error, call);
    }

    scheduler.call(null, complete, cancel, call);
  }

  return processor;
};


/**
 * @param {!tio.listener.IRouter} router
 * @return {!yaa.Step}
 */
tio.listener.__scheduler = function(router) {


  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {!tio.thrift.Message} call
   */
  function scheduler(complete, cancel, call) {

    /**
     * @param {!yaa.api.ISession} session
     */
    function schedule(session) {
      session.schedule(complete, cancel,
          router.step(call), router.stateful(call));
    }

    router.session(schedule, cancel, call);
  }


  return yaa.esc(scheduler);
};



/**
 * @constructor
 * @implements {yaa.IStep}
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {tio.client.HttpOptions} options
 */
tio.client.__Http = function(protocol, options) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {tio.client.HttpOptions}
   */
  this.__options = options;
};


/**
 * @inheritDoc
 */
tio.client.__Http.prototype.call =
    function(context, complete, cancel, message) {
  console.info('Send request "' + message + '" to "' +
      this.__options.hostname + ':' + this.__options.port + '".');

  var protocol = this.__protocol;
  var request = http.request({
    'method': 'POST',
    'headers': message.getHeaders(),
    'hostname': this.__options.hostname,
    'port': this.__options.port
  });


  /**
   * @param {!http.IncomingMessage} response
   */
  function localComplete(response) {
    request.removeAllListeners();
    tio.thrift.decode(complete, cancel, protocol, response);
  }

  /**
   * @param {!Error} error
   */
  function localCancel(error) {
    request.removeAllListeners();
    cancel('Worker request error: "' + error + '".');
  }

  request.addListener('response', localComplete);
  request.addListener('error', localCancel);
  request.end(thrift.encodeCall(this.__protocol,
      message.getId(), message.getName(), message.getArgs()));
};


/**
 * @typedef {{
 *   hostname: string,
 *   port: number,
 *   path: string
 * }}
 */
tio.client.HttpOptions;


/**
 * @param {number} port
 * @param {string} host
 */
tio.client.init = function(port, host) {
  console.info('Init thrift-io client for "' +
      host + ':' + port + '" discovery endpoint.');

  tio.client.__host = host;
  tio.client.__port = port;
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {string} name
 * @param {string} version
 * @param {string} type
 * @return {!yaa.api.client.Provider}
 */
tio.client.http = function(protocol, name, version, type) {

  /**
   * @param {function(!tio.client.__Http)} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function provider(complete, cancel) {

    /**
     * @param {!Array.<!Object>} nodes
     */
    function localComplete(nodes) {
      var endpoint = tio.client.__selectEndpoint(type, nodes);
      if (endpoint !== null) {
        console.info('Request for "' + name + '@' + version +
            '" will address to "' + endpoint.hostname + ':' +
                endpoint.port + '".');

        complete(new tio.client.__Http(protocol, endpoint));
      } else {
        cancel('Unable to select endpoints.');
      }
    }

    tio.client.__requestEndpoints(localComplete, cancel, name, version);
  }

  return provider;
};


/**
 * @param {string} type
 * @param {!Array.<!Object>} nodes
 * @return {tio.client.HttpOptions}
 */
tio.client.__selectEndpoint = function(type, nodes) {
  console.info('Select for "' + type + '" service interface address.');

  var endpoints = [];

  for (var i = 0; i < nodes.length; i += 1) {
    var tags = nodes[i]['ServiceTags'];

    for (var j = 0; j < tags.length; j += 1) {
      var tag = tags[j];
      if (tag.indexOf(type + '=') === 0) {
        var address = tag.substr(type.length + 1).split(':');

        endpoints.push({
          'hostname': address.shift(),
          'port': address.shift()
        });
      }
    }
  }

  return endpoints[Math.floor(Math.random() * endpoints.length)] || null;
};


/**
 * @param {function(!Array.<!Object>)} complete
 * @param {yaa.ErrorHandler} cancel
 * @param {string} name
 * @param {string} version
 */
tio.client.__requestEndpoints = function(complete, cancel, name, version) {
  console.info('Request for "' + name + '@' + version + '" service endpoints.');

  var request = http.request({
    'path': '/v1/catalog/service/' + name + '?tag=v' + version,
    'hostname': tio.client.__host,
    'port': tio.client.__port
  });

  /**
   * @param {!http.IncomingMessage} response
   */
  function localComplete(response) {
    var payload = '';

    /**
     * @param {!Buffer} chunk
     */
    function process(chunk) {
      payload += chunk;
    }

    function localComplete() {
      var data = null;
      var error = null;

      try {
        data = JSON.parse(payload);
      } catch (err) {
        error = err;
      }

      if (data instanceof Array) {
        complete(data);
      } else {
        cancel(error);
      }
    }

    response.addListener('data', process);
    response.addListener('close', localComplete);
    response.addListener('error', localComplete);
    response.addListener('end', localComplete);
    request.removeAllListeners();
  }

  /**
   * @param {!Error} error
   */
  function localCancel(error) {
    request.removeAllListeners();

    cancel(error);
  }

  request.addListener('response', localComplete);
  request.addListener('error', localCancel);
  request.end();
};


/**
 * @type {string}
 */
tio.client.__host = '127.0.0.1';


/**
 * @type {number}
 */
tio.client.__port = 8500;



/**
 * @constructor
 * @implements {tio.listener.IProtocol}
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!tio.thrift.HeaderOptions=} opt_options
 */
tio.thrift.Protocol = function(protocol, opt_options) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!tio.thrift.HeaderOptions|!Object}
   */
  this.__options = opt_options || {};
};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.process = function(request, apply, cancel) {
  tio.thrift.decode(apply, cancel, this.__protocol, request,
      this.__options.extractor);
};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.complete = function(response, message, result) {
  response.writeHead(200, this.__options.installer ?
      this.__options.installer(message.getHeaders()) : {});

  response.end(thrift.encodeReply(this.__protocol,
      message.getId(), message.getName(), result[0]));
};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.cancel =
    function(response, error, opt_message) {
  response.writeHead(200, this.__options.installer ?
      this.__options.installer({}) : {});

  if (opt_message !== undefined) {
    response.end(thrift.encodeException(this.__protocol,
        opt_message.getId(), opt_message.getName(), String(error)));

  } else {
    response.end(thrift.encodeException(
        this.__protocol, 0, '', String(error)));
  }
};



/**
 * @constructor
 * @param {number} id
 * @param {string} name
 * @param {!Array} args
 * @param {!Object.<string, string>} headers
 */
tio.thrift.Message = function(id, name, args, headers) {

  /**
   * @type {number}
   */
  this.__id = id;

  /**
   * @type {string}
   */
  this.__name = name;

  /**
   * @type {!Object.<string, string>}
   */
  this.__headers = headers;

  /**
   * @type {!Array}
   */
  this.__args = args;
};


/**
 * @return {!Array}
 */
tio.thrift.Message.prototype.getArgs = function() {
  return this.__args;
};


/**
 * @return {string}
 */
tio.thrift.Message.prototype.getName = function() {
  return this.__name;
};


/**
 * @return {number}
 */
tio.thrift.Message.prototype.getId = function() {
  return this.__id;
};


/**
 * @return {!Object.<string, string>}
 */
tio.thrift.Message.prototype.getHeaders = function() {
  return this.__headers;
};


/**
 * @param {string} name
 * @return {string}
 */
tio.thrift.Message.prototype.getHeader = function(name) {
  return this.__headers[name] || '';
};


/**
 * @inheritDoc
 */
tio.thrift.Message.prototype.toString = function() {
  return '(' + this.__id + ',' +
      this.__name + ', [' + this.__args.join(', ') + '])';
};


/**
 * @typedef {?function(!Object.<string, string>):!Object.<string, string>}
 */
tio.thrift.HeadersFilter;


/**
 * @typedef {?{
 *   installer: !tio.thrift.HeadersFilter,
 *   extractor: !tio.thrift.HeadersFilter
 * }}
 */
tio.thrift.HeaderOptions;


/**
 * @param {function(!tio.thrift.Message)} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!http.IncomingMessage} stream
 * @param {!tio.thrift.HeadersFilter=} opt_headerExtractor
 */
tio.thrift.decode = function(complete, cancel, protocol, stream,
                             opt_headerExtractor) {
  var payload = [];
  var size = 0;

  /**
   * @param {!Buffer} chunk
   */
  function process(chunk) {
    payload.push(chunk);
    size += chunk.length;
  }

  function decode() {
    stream.removeAllListeners();

    var handler = thrift.protocol.MESSAGE_HANDLER(protocol);
    handler.process(new thrift.Cursor(), Buffer.concat(payload, size));

    var message = handler.get();
    if (message instanceof thrift.Message) {
      var value = message.getValue();
      if (value instanceof Array) {
        complete(new tio.thrift.Message(message.getId(), message.getName(),
            value, opt_headerExtractor ?
                opt_headerExtractor(stream.headers) : stream.headers));
      } else {
        cancel(value);
      }
    } else {
      cancel('Incorrect message payload.');
    }
  }

  stream.addListener('data', process);
  stream.addListener('close', decode);
  stream.addListener('error', decode);
  stream.addListener('end', decode);
};


/**
 * @return {!yaa.Step}
 */
tio.process.api.init = function() {
  return yaa.sequence([
    tio.process.api.Context.prototype.destroy,
    tio.process.api.Context.prototype.init,
    tio.process.api.Context.prototype.listen
  ]);
};


/**
 * @return {!yaa.Step}
 */
tio.process.api.destroy = function() {
  return tio.process.api.Context.prototype.destroy;
};


/**
 * @return {!yaa.Step}
 */
tio.process.api.reload = function() {
  return tio.process.api.Context.prototype.init;
};



/**
 * @constructor
 * @param {!tio.process.Endpoint} endpoint
 * @param {!tio.process.Worker} worker
 */
tio.process.api.Context = function(endpoint, worker) {

  /**
   * @type {!tio.process.Worker}
   */
  this.__worker = worker;

  /**
   * @type {!tio.process.Endpoint}
   */
  this.__endpoint = endpoint;
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.api.Context.prototype.init = function(complete, cancel) {
  this.__worker.init(complete, cancel);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.api.Context.prototype.destroy = function(complete, cancel) {
  var self = this;

  function destroy() {
    self.__worker.destroy(complete, cancel);
  }

  this.__endpoint.close(destroy, cancel);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.api.Context.prototype.listen = function(complete, cancel) {
  this.__endpoint.listen(complete, cancel,
      this.__worker.listener());
};



/**
 * @constructor
 * @param {number} port
 * @param {string} host
 */
tio.process.Endpoint = function(port, host) {

  /**
   * @type {!http.Server}
   */
  this.__server = http.createServer();

  /**
   * @type {number}
   */
  this.__port = port;

  /**
   * @type {string}
   */
  this.__host = host;

  /**
   * @type {boolean}
   */
  this.__isRunnig = false;
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {function(!http.IncomingMessage, !http.ServerResponse)} listener
 */
tio.process.Endpoint.prototype.listen = function(complete, cancel, listener) {
  console.info('Start listening at "' +
      this.__host + '":"' + this.__port + '".');

  var self = this;

  function localComplete() {
    self.__server.removeListener('error', localCancel);
    self.__server.removeListener('listening', localComplete);

    complete();
  }

  /**
   * @param {yaa.Error} error
   */
  function localCancel(error) {
    console.error('Unable to listen "' +
        self.__host + ':' + self.__port + '".');

    self.__server.removeListener('error', localCancel);
    self.__server.removeListener('listening', localComplete);

    cancel(error);
  }

  this.__server.addListener('error', localCancel);
  this.__server.addListener('listening', localComplete);
  this.__server.addListener('request', listener);

  this.__server.listen(this.__port, this.__host);
  this.__isRunnig = true;
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Endpoint.prototype.close = function(complete, cancel) {
  console.info('Stop listening at "' +
      this.__host + ':' + this.__port + '".');

  if (this.__isRunnig) {
    this.__server.close(complete);
    this.__isRunnig = false;
  } else {
    complete();
  }
};


/**
 * @param {!tio.process.Endpoint} endpoint
 * @param {!tio.process.Worker} worker
 */
tio.process.init = function(endpoint, worker) {
  if (tio.process.__session === null) {
    tio.process.__session = yaa.api.session(
        new tio.process.api.Context(endpoint, worker));

    tio.process.__session.schedule(yaa.complete, console.error,
        tio.process.api.init(), true);
  }
};


/**
 *
 */
tio.process.reload = function() {
  if (tio.process.__session !== null) {
    tio.process.__session.schedule(yaa.complete, console.error,
        tio.process.api.reload(), true);
  }
};


/**
 *
 */
tio.process.destroy = function() {
  if (tio.process.__session !== null) {
    tio.process.__session.schedule(yaa.complete, console.error,
        tio.process.api.destroy(), true);
  }
};


/**
 * @type {yaa.api.ISession}
 */
tio.process.__session = null;



/**
 * @constructor
 * @param {!tio.process.IWorker} worker
 */
tio.process.Worker = function(worker) {

  /**
   * @type {!tio.process.IWorker}
   */
  this.__worker = worker;

  /**
   * @type {!tio.listener.Processor}
   */
  this.__listener = tio.listener.listen(worker.protocol(), worker.router());
};


/**
 * @return {!tio.listener.Processor}
 */
tio.process.Worker.prototype.listener = function() {
  return this.__listener;
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Worker.prototype.init = function(complete, cancel) {
  console.info('Init worker.');

  this.__worker.init(complete, cancel);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Worker.prototype.destroy = function(complete, cancel) {
  console.info('Destroy worker.');

  this.__worker.destroy(complete, cancel);
};



/**
 * @interface
 */
tio.process.IWorker = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.IWorker.prototype.init = function(complete, cancel) {};


/**
 * @return {!tio.listener.IRouter}
 */
tio.process.IWorker.prototype.router = function() {};


/**
 * @return {!tio.listener.IProtocol}
 */
tio.process.IWorker.prototype.protocol = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.IWorker.prototype.destroy = function(complete, cancel) {};

module.exports = tio;

