


/**
 * @constructor
 * @implements {tio.listener.IProtocol}
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!tio.thrift.HeaderOptions=} opt_options
 */
tio.thrift.Protocol = function(protocol, opt_options) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!tio.thrift.HeaderOptions|!Object}
   */
  this.__options = opt_options || {};
};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.process = function(request, apply, cancel) {
  tio.thrift.decode(apply, cancel, this.__protocol, request,
      this.__options.extractor);
};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.complete = function(response, message, result) {
  response.writeHead(200, this.__options.installer ?
      this.__options.installer(message.getHeaders()) : {});

  response.end(thrift.encodeReply(this.__protocol,
      message.getId(), message.getName(), result[0]));
};


/**
 * @inheritDoc
 */
tio.thrift.Protocol.prototype.cancel =
    function(response, error, opt_message) {
  response.writeHead(200, this.__options.installer ?
      this.__options.installer({}) : {});

  if (opt_message !== undefined) {
    response.end(thrift.encodeException(this.__protocol,
        opt_message.getId(), opt_message.getName(), String(error)));

  } else {
    response.end(thrift.encodeException(
        this.__protocol, 0, '', String(error)));
  }
};
