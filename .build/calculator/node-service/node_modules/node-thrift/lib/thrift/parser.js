


/**
 * @constructor
 * @param {!thrift.protocol.IProtocol}  protocol
 */
thrift.Parser = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol} protocol
   */
  this.__protocol = protocol;

  /**
   * @type {!Buffer}
   */
  this.__readBuffer = new Buffer(0);

  /**
   * @type {thrift.IPacketHandler}
   */
  this.__handler = null;
};


/**
 * @param {!Buffer} chunk
 * @param {function(thrift.Value)} callback
 */
thrift.Parser.prototype.process = function(chunk, callback) {
  var cursor = new thrift.Cursor();

  this.__readBuffer = this.__readBuffer.length > 0 ?
      Buffer.concat([this.__readBuffer, chunk]) : chunk;

  while (this.__readBuffer.length > 0 &&
      cursor.getPosition() < chunk.length && cursor.isParsed()) {

    if (this.__handler === null) {
      this.__handler = thrift.protocol.MESSAGE_HANDLER(this.__protocol);
    }

    if (this.__handler.process(cursor, this.__readBuffer)) {
      callback(this.__handler.get());
      this.__handler = null;
    }
  }

  this.__readBuffer = this.__readBuffer.slice(cursor.getPosition());
};
