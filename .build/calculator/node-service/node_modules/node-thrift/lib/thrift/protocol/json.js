


/**
 * @constructor
 * @implements {thrift.protocol.IProtocol}
 *
 * @param {!thrift.ISchema} idl
 */
thrift.protocol.Json = function(idl) {

  /**
   * @type {!thrift.ISchema}
   */
  this.__idl = idl;

  /**
   * @type {!Object}
   */
  this.__body = {};

  /**
   * @type {Array.<!Object>}
   */
  this.__contextPath = [];

  /**
   * @type {?string}
   */
  this.__contextName = null;
};


/**
 * @type {number}
 */
thrift.protocol.Json.VERSION = 1;


/**
 * @enum {string}
 */
thrift.protocol.Json.TYPE = {
  2: 'tf',
  3: 'i8',
  4: 'dbl',
  6: 'i16',
  8: 'i32',
  10: 'i64',
  11: 'str',
  12: 'rec',
  14: 'set',
  13: 'map',
  15: 'lst'
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {
  this.__body = {};
  this.__contextPath = [];
  this.__contextName = null;


  collector.push(thrift.protocol.Json.VERSION);
  collector.push(methodName);
  collector.push(type);
  collector.push(seqid);
  collector.push(this.__body);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeFieldHeader =
    function(collector, type, id) {
  type = thrift.protocol.Json.TYPE[type];
  var context = this.__getContext();

  var field = {};
  this.__writeContext(context, id);
  this.__writeContext(context, field);
  this.__pushContext(field);
  this.__writeContext(field, type);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeFieldStop = function(collector) {
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeStructureStop = function(collector) {
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeArray =
    function(collector, array, fullValueType) {

  var context = this.__getContext();
  var type = thrift.protocol.Json.TYPE[fullValueType.getType()];
  var arr = [type, array.length];

  this.__writeContext(context, arr);
  this.__pushContext(arr);

  for (var i = 0; i < array.length; i++) {
    if (array[i] !== undefined) {
      thrift.serializeValue(collector, array[i], fullValueType, this);
    }
  }
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {

  var context = this.__getContext();
  var ktype = thrift.protocol.Json.TYPE[keyInfo.getType()];
  var vtype = thrift.protocol.Json.TYPE[valInfo.getType()];
  var size = Object.keys(map).length;
  var container = {};
  var arr = [ktype, vtype, size, container];

  this.__writeContext(context, arr);
  this.__pushContext(container);
  for (var key in map) {
    if (map.hasOwnProperty(key)) {
      thrift.serializeValue(collector, key, keyInfo, this);
      //если будет знаечение null, то будет баг
      thrift.serializeValue(collector, map[key], valInfo, this);
    }
  }
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeStructure =
    function(collector, userStructure, type) {

  var structureInfo = this.__idl.getStructureDefinition(type);
  var struct = userStructure.toThrift();
  if (structureInfo !== null) {
    var context = this.__getContext();
    var container = {};
    this.__writeContext(context, container);
    this.__pushContext(container);

    for (var field in struct) {
      if (struct.hasOwnProperty(field) &&
          struct[field] !== undefined &&
          struct[field] !== null) {
        var typeInfo = structureInfo.getTypeByName(field);
        var id = structureInfo.getIdByName(field);

        this.writeFieldHeader(collector, typeInfo.getType(), id);
        thrift.serializeValue(collector, struct[field], typeInfo, this);
        this.writeFieldStop(collector);
      }
    }
  }
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeListHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeMapHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeSetHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeBool = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value ? 1 : 0);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeByte = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI16 = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI32 = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI64 = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeDouble = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeString = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readString = function(cursor, chunk) {
  return '';
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readDouble = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI16 = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readByte = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI64 = function(cursor, chunk) {
  return new thrift.protocol.Int64(-1);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readBool = function(cursor, chunk) {
  return false;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI32 = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.getIdl = function() {
  return this.__idl;
};


/**
 * @return {!Object|!Array}
 */
thrift.protocol.Json.prototype.__getContext = function() {
  var context = this.__body;

  if (this.__contextPath.length > 0) {
    context = this.__contextPath[this.__contextPath.length - 1];
  }

  return context;
};


/**
 * @param {!Object|!Array} context
 * @param {!thrift.Value} value
 */
thrift.protocol.Json.prototype.__writeContext = function(context, value) {
  if (context instanceof Array) {

    context.push(value);
  } else if (this.__contextName !== null) {

    context[this.__contextName] = value;
    this.__contextName = null;
  } else if (typeof value === 'string' || typeof value === 'number') {

    context[value] = null;
    this.__contextName = String(value);
  } else {
    console.log('[__writeContext] wrong value', value);
  }
};


/**
 * @param {!Object|!Array} context
 * @param {string=} opt_type
 */
thrift.protocol.Json.prototype.__pushContext = function(context, opt_type) {
  this.__contextPath.push(context);

  if (opt_type) {
    this.__contextName = opt_type;
  } else {
    this.__contextName = null;
  }
};


/**
 */
thrift.protocol.Json.prototype.__popContext = function() {
  this.__contextPath.pop();
  this.__contextName = null;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.getType = function() {
  return thrift.protocol.Type.JSON;
};
