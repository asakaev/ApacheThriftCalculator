

/**
 * @namespace
 */
var thrift = {};


/**
 * @namespace
 */
thrift.protocol = {};


/**
 * @namespace
 */
thrift.protocol.binary = {};


/**
 * @namespace
 */
thrift.protocol.json = {};


/**
 * @namespace
 */
thrift.protocol.collector = {};


/**
 * @namespace
 */
thrift.definition = {};


/**
 * @namespace
 */
thrift.io = {};


/**
 * @namespace
 */
thrift.io.http = {};


/**
 * @namespace
 */
thrift.io.tcp = {};


/**
 * @typedef {*}
 */
thrift.Value;


/**
 * @typedef {*}
 */
thrift.Error;


/**
 * @typedef {function(*)}
 */
thrift.CompleteHandler;


/**
 * @typedef {function(thrift.Error, number=)}
 */
thrift.ErrorHandler;


/**
 * @typedef {?function(number,
 *    !thrift.protocol.IProtocol):thrift.IPacketHandler}
 */
thrift.HandlerBuilder;


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {thrift.IPacketHandler}
 */
thrift.handlerBuilder = function(type, protocol) {
  if (type >= thrift.definition.Type.BOOL &&
      type < thrift.definition.Type.STRUCT) {
    return new thrift.SimpleHandler(type, protocol);
  }

  if (type === thrift.definition.Type.LIST ||
      type === thrift.definition.Type.SET) {
    return thrift.protocol.ARRAY_HANDLER(type, protocol);
  }

  if (type === thrift.definition.Type.MAP) {
    return thrift.protocol.MAP_HANDLER(type, protocol);
  }

  if (type === thrift.definition.Type.STRUCT) {
    return thrift.protocol.STRUCTURE_HANDLER(type, protocol);
  }

  if (type === thrift.definition.Type.STOP) {
    return new thrift.SimpleHandler(type, protocol);
  }

  return null;
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {number} id
 * @param {string} name
 * @param {!Array.<thrift.Value>} args
 * @return {!Buffer}
 */
thrift.encodeCall = function(protocol, id, name, args) {
  var idl = protocol.getIdl(),
      collector = thrift.protocol.collector.byProtocol(protocol);

  var method = idl.getMethodDefinition(name);
  if (method !== null) {
    protocol.writeMessageHeader(collector, name,
        thrift.definition.MessageType.CALL, id);

    for (var i = 0; i < args.length; i += 1) {
      var param = method.getParameter(i + 1);
      if (param !== null) {
        var type = param.getFullType();

        protocol.writeFieldHeader(collector, type.getType(), i + 1);
        thrift.serializeValue(collector, args[i], type, protocol);
        protocol.writeFieldStop(collector);
      }
    }
    protocol.writeStructureStop(collector);
  } else {
    console.warn('Can\'t call method:', name, '[thrift.encodeCall]');
  }

  return collector.getTotal();
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {number} id
 * @param {string} name
 * @param {thrift.Value} data
 * @return {!Buffer}
 */
thrift.encodeReply = function(protocol, id, name, data) {
  var idl = protocol.getIdl(),
      collector = thrift.protocol.collector.byProtocol(protocol);

  var method = idl.getMethodDefinition(name);
  if (method !== null) {
    var type = method.getReturnType();

    protocol.writeMessageHeader(collector, name,
        thrift.definition.MessageType.REPLY, id);

    if (type.getType() !== thrift.definition.Type.VOID) {
      protocol.writeFieldHeader(collector, type.getType(), 0);
      thrift.serializeValue(collector, data, type, protocol);
      protocol.writeFieldStop(collector);
    }
    protocol.writeStructureStop(collector);
  } else {
    console.warn('Can\'t reply to method:', name, '[thrift.encodeReply]');
  }
  return collector.getTotal();
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!number} id
 * @param {!string} name
 * @param {!string} message
 * @param {number=} opt_code
 * @return {!Buffer}
 */
thrift.encodeException =
    function(protocol, id, name, message, opt_code) {
  var collector = thrift.protocol.collector.byProtocol(protocol);

  protocol.writeMessageHeader(collector, name,
      thrift.definition.MessageType.EXCEPTION, id);

  protocol.writeFieldHeader(collector, thrift.definition.Type.STRING, 1);
  thrift.serializeValue(collector, message,
      new thrift.definition.FullType(thrift.definition.Type.STRING), protocol);
  protocol.writeFieldStop(collector);

  if (opt_code !== undefined) {
    protocol.writeFieldHeader(collector, thrift.definition.Type.I16, 2);
    thrift.serializeValue(collector, opt_code,
        new thrift.definition.FullType(thrift.definition.Type.I16), protocol);
    protocol.writeFieldStop(collector);
  }
  protocol.writeStructureStop(collector);

  return collector.getTotal();
};


/**
 * @param {thrift.Value} field
 * @param {!thrift.definition.FullType} fullType
 * @param {!thrift.ISchema} idl
 * @return {thrift.Value}
 */
thrift.convertNestedStructure = function(field, fullType, idl) {
  var resultField = field;

  if (fullType.getType() === thrift.definition.Type.STRUCT) {
    if (field instanceof Object) {
      resultField =
          thrift.convertStructure(fullType.getStructType(), field, idl);
    }
  }

  if (fullType.getType() === thrift.definition.Type.MAP ||
      fullType.getType() === thrift.definition.Type.LIST ||
      fullType.getType() === thrift.definition.Type.SET) {

    var valueType = fullType.getValueType();
    if (valueType.getType() === thrift.definition.Type.STRUCT) {
      for (var key in field) {
        resultField[key] = thrift.convertStructure(
            valueType.getStructType(), field[key], idl);
      }
    }
  }

  return resultField;
};


/**
 * @param {string} type structure class name.
 * @param {!Object} structure thriftStructure
 * @param {!thrift.ISchema} idl
 * @return {!Object}
 */
thrift.convertStructure = function(type, structure, idl) {
  var structureDefinition = idl.getStructureDefinition(type);
  var args = {};
  var result = {};

  if (structureDefinition !== null) {
    for (var id in structure) {
      var field = structure[id];
      var fieldFullType = structureDefinition.getTypeById(id);
      if (fieldFullType !== null) {
        field = thrift.convertNestedStructure(field, fieldFullType, idl);
        args[id] = field;
      } else {
        console.warn('Unknown field with id: ' + id + ' in Structure: ' + type);
      }
    }
    result = idl.createStructure(type, args);
  } else {
    console.warn('Unknown structure: ' + type + ' in Idl');
  }

  return result;
};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!thrift.Value} value
 * @param {!thrift.definition.FullType} fullType
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.serializeValue = function(collector, value, fullType, protocol) {
  var type = fullType.getType();
  if (typeof value === 'string') {

    if (type === thrift.definition.Type.STRING) {
      protocol.writeString(collector, value);
    } else if (type === thrift.definition.Type.BYTE) {
      protocol.writeByte(collector, Number(value));
    } else if (type === thrift.definition.Type.I16) {
      protocol.writeI16(collector, Number(value));
    } else if (type === thrift.definition.Type.I32) {
      protocol.writeI32(collector, Number(value));
    }

  } else if (typeof value === 'boolean' &&
      type === thrift.definition.Type.BOOL) {
    protocol.writeBool(collector, value);
  } else if (typeof value === 'number') {

    if (type === thrift.definition.Type.BYTE) {
      protocol.writeByte(collector, value);
    } else if (type === thrift.definition.Type.I16) {
      protocol.writeI16(collector, value);
    } else if (type === thrift.definition.Type.I32) {
      protocol.writeI32(collector, value);
    } else if (type === thrift.definition.Type.I64) {
      protocol.writeI64(collector, value);
    } else if (type === thrift.definition.Type.DOUBLE) {
      protocol.writeDouble(collector, value);
    }

  } else if (value instanceof thrift.protocol.Int64) {
    protocol.writeI64(collector, value);
  } else if (value instanceof Object) {
    if (type === thrift.definition.Type.MAP) {
      protocol.serializeMap(collector,
          value, fullType.getKeyType(), fullType.getValueType());
    } else if (type === thrift.definition.Type.SET ||
        type === thrift.definition.Type.LIST) {
      protocol.serializeArray(collector, value, fullType.getValueType());
    } else if (type === thrift.definition.Type.STRUCT) {
      protocol.serializeStructure(collector, value, fullType.getStructType());
    }
  } else {
    console.warn('Unknown value type: ' + type + ' [thrift.serializeValue]');
  }
};

