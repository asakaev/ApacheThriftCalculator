

var util = require('util');

/**
 * @namespace
 */
var thrift = {};


/**
 * @namespace
 */
thrift.protocol = {};


/**
 * @namespace
 */
thrift.protocol.binary = {};


/**
 * @namespace
 */
thrift.protocol.json = {};


/**
 * @namespace
 */
thrift.protocol.collector = {};


/**
 * @namespace
 */
thrift.definition = {};


/**
 * @namespace
 */
thrift.io = {};


/**
 * @namespace
 */
thrift.io.http = {};


/**
 * @namespace
 */
thrift.io.tcp = {};


/**
 * @typedef {*}
 */
thrift.Value;


/**
 * @typedef {*}
 */
thrift.Error;


/**
 * @typedef {function(*)}
 */
thrift.CompleteHandler;


/**
 * @typedef {function(thrift.Error, number=)}
 */
thrift.ErrorHandler;


/**
 * @typedef {?function(number,
 *    !thrift.protocol.IProtocol):thrift.IPacketHandler}
 */
thrift.HandlerBuilder;


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {thrift.IPacketHandler}
 */
thrift.handlerBuilder = function(type, protocol) {
  if (type >= thrift.definition.Type.BOOL &&
      type < thrift.definition.Type.STRUCT) {
    return new thrift.SimpleHandler(type, protocol);
  }

  if (type === thrift.definition.Type.LIST ||
      type === thrift.definition.Type.SET) {
    return thrift.protocol.ARRAY_HANDLER(type, protocol);
  }

  if (type === thrift.definition.Type.MAP) {
    return thrift.protocol.MAP_HANDLER(type, protocol);
  }

  if (type === thrift.definition.Type.STRUCT) {
    return thrift.protocol.STRUCTURE_HANDLER(type, protocol);
  }

  if (type === thrift.definition.Type.STOP) {
    return new thrift.SimpleHandler(type, protocol);
  }

  return null;
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {number} id
 * @param {string} name
 * @param {!Array.<thrift.Value>} args
 * @return {!Buffer}
 */
thrift.encodeCall = function(protocol, id, name, args) {
  var idl = protocol.getIdl(),
      collector = thrift.protocol.collector.byProtocol(protocol);

  var method = idl.getMethodDefinition(name);
  if (method !== null) {
    protocol.writeMessageHeader(collector, name,
        thrift.definition.MessageType.CALL, id);

    for (var i = 0; i < args.length; i += 1) {
      var param = method.getParameter(i + 1);
      if (param !== null) {
        var type = param.getFullType();

        protocol.writeFieldHeader(collector, type.getType(), i + 1);
        thrift.serializeValue(collector, args[i], type, protocol);
        protocol.writeFieldStop(collector);
      }
    }
    protocol.writeStructureStop(collector);
  } else {
    console.warn('Can\'t call method:', name, '[thrift.encodeCall]');
  }

  return collector.getTotal();
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {number} id
 * @param {string} name
 * @param {thrift.Value} data
 * @return {!Buffer}
 */
thrift.encodeReply = function(protocol, id, name, data) {
  var idl = protocol.getIdl(),
      collector = thrift.protocol.collector.byProtocol(protocol);

  var method = idl.getMethodDefinition(name);
  if (method !== null) {
    var type = method.getReturnType();

    protocol.writeMessageHeader(collector, name,
        thrift.definition.MessageType.REPLY, id);

    if (type.getType() !== thrift.definition.Type.VOID) {
      protocol.writeFieldHeader(collector, type.getType(), 0);
      thrift.serializeValue(collector, data, type, protocol);
      protocol.writeFieldStop(collector);
    }
    protocol.writeStructureStop(collector);
  } else {
    console.warn('Can\'t reply to method:', name, '[thrift.encodeReply]');
  }
  return collector.getTotal();
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!number} id
 * @param {!string} name
 * @param {!string} message
 * @param {number=} opt_code
 * @return {!Buffer}
 */
thrift.encodeException =
    function(protocol, id, name, message, opt_code) {
  var collector = thrift.protocol.collector.byProtocol(protocol);

  protocol.writeMessageHeader(collector, name,
      thrift.definition.MessageType.EXCEPTION, id);

  protocol.writeFieldHeader(collector, thrift.definition.Type.STRING, 1);
  thrift.serializeValue(collector, message,
      new thrift.definition.FullType(thrift.definition.Type.STRING), protocol);
  protocol.writeFieldStop(collector);

  if (opt_code !== undefined) {
    protocol.writeFieldHeader(collector, thrift.definition.Type.I16, 2);
    thrift.serializeValue(collector, opt_code,
        new thrift.definition.FullType(thrift.definition.Type.I16), protocol);
    protocol.writeFieldStop(collector);
  }
  protocol.writeStructureStop(collector);

  return collector.getTotal();
};


/**
 * @param {thrift.Value} field
 * @param {!thrift.definition.FullType} fullType
 * @param {!thrift.ISchema} idl
 * @return {thrift.Value}
 */
thrift.convertNestedStructure = function(field, fullType, idl) {
  var resultField = field;

  if (fullType.getType() === thrift.definition.Type.STRUCT) {
    if (field instanceof Object) {
      resultField =
          thrift.convertStructure(fullType.getStructType(), field, idl);
    }
  }

  if (fullType.getType() === thrift.definition.Type.MAP ||
      fullType.getType() === thrift.definition.Type.LIST ||
      fullType.getType() === thrift.definition.Type.SET) {

    var valueType = fullType.getValueType();
    if (valueType.getType() === thrift.definition.Type.STRUCT) {
      for (var key in field) {
        resultField[key] = thrift.convertStructure(
            valueType.getStructType(), field[key], idl);
      }
    }
  }

  return resultField;
};


/**
 * @param {string} type structure class name.
 * @param {!Object} structure thriftStructure
 * @param {!thrift.ISchema} idl
 * @return {!Object}
 */
thrift.convertStructure = function(type, structure, idl) {
  var structureDefinition = idl.getStructureDefinition(type);
  var args = {};
  var result = {};

  if (structureDefinition !== null) {
    for (var id in structure) {
      var field = structure[id];
      var fieldFullType = structureDefinition.getTypeById(id);
      if (fieldFullType !== null) {
        field = thrift.convertNestedStructure(field, fieldFullType, idl);
        args[id] = field;
      } else {
        console.warn('Unknown field with id: ' + id + ' in Structure: ' + type);
      }
    }
    result = idl.createStructure(type, args);
  } else {
    console.warn('Unknown structure: ' + type + ' in Idl');
  }

  return result;
};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!thrift.Value} value
 * @param {!thrift.definition.FullType} fullType
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.serializeValue = function(collector, value, fullType, protocol) {
  var type = fullType.getType();
  if (typeof value === 'string') {

    if (type === thrift.definition.Type.STRING) {
      protocol.writeString(collector, value);
    } else if (type === thrift.definition.Type.BYTE) {
      protocol.writeByte(collector, Number(value));
    } else if (type === thrift.definition.Type.I16) {
      protocol.writeI16(collector, Number(value));
    } else if (type === thrift.definition.Type.I32) {
      protocol.writeI32(collector, Number(value));
    }

  } else if (typeof value === 'boolean' &&
      type === thrift.definition.Type.BOOL) {
    protocol.writeBool(collector, value);
  } else if (typeof value === 'number') {

    if (type === thrift.definition.Type.BYTE) {
      protocol.writeByte(collector, value);
    } else if (type === thrift.definition.Type.I16) {
      protocol.writeI16(collector, value);
    } else if (type === thrift.definition.Type.I32) {
      protocol.writeI32(collector, value);
    } else if (type === thrift.definition.Type.I64) {
      protocol.writeI64(collector, value);
    } else if (type === thrift.definition.Type.DOUBLE) {
      protocol.writeDouble(collector, value);
    }

  } else if (value instanceof thrift.protocol.Int64) {
    protocol.writeI64(collector, value);
  } else if (value instanceof Object) {
    if (type === thrift.definition.Type.MAP) {
      protocol.serializeMap(collector,
          value, fullType.getKeyType(), fullType.getValueType());
    } else if (type === thrift.definition.Type.SET ||
        type === thrift.definition.Type.LIST) {
      protocol.serializeArray(collector, value, fullType.getValueType());
    } else if (type === thrift.definition.Type.STRUCT) {
      protocol.serializeStructure(collector, value, fullType.getStructType());
    }
  } else {
    console.warn('Unknown value type: ' + type + ' [thrift.serializeValue]');
  }
};




/**
 * @interface
 */
thrift.IStructure = function() {};


/**
 * @return {!Object}
 */
thrift.IStructure.prototype.toThrift = function() {};



/**
 * @interface
 */
thrift.IPacketHandler = function() {};


/**
 * Shifts cursor and returns is's new position.
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 * @return {boolean} Flag of packet handling.
 */
thrift.IPacketHandler.prototype.process = function(cursor, chunk) {};


/**
 * @return {thrift.Value}
 */
thrift.IPacketHandler.prototype.get = function() {};



/**
 * @interface
 */
thrift.IValueKeeper = function() {};


/**
 * @return {boolean}
 */
thrift.IValueKeeper.prototype.isComplete = function() {};


/**
 * @param {thrift.Value} value
 */
thrift.IValueKeeper.prototype.applyData = function(value) {};


/**
 * @return {thrift.Value} value
 */
thrift.IValueKeeper.prototype.get = function() {};


/**
 * @return {number} type
 */
thrift.IValueKeeper.prototype.getType = function() {};


/**
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.IValueKeeper.prototype.processHeader = function(cursor, chunk) {};


/**
 * @return {boolean} Flag of packet handling.
 */
thrift.IValueKeeper.prototype.isHeaderComplete = function() {};




/**
 * @interface
 */
thrift.ISchema = function() {};


/**
 * @param {string} type
 * @param {!Object} args
 * @return {!Object}
 */
thrift.ISchema.prototype.createStructure = function(type, args) {};


/**
 * @param {string} type
 * @return {thrift.definition.Structure}
 */
thrift.ISchema.prototype.getStructureDefinition = function(type) {};


/**
 * @param {string} name
 * @return {thrift.definition.Method}
 */
thrift.ISchema.prototype.getMethodDefinition = function(name) {};



/**
 * Global cursor.
 * @constructor
 */
thrift.Cursor = function() {

  /**
   * @type {number}.
   */
  this.__position = 0;

  /**
   * @type {boolean}.
   */
  this.__isParsed = true;
};


/**
 * @return {number} current cursor position.
 */
thrift.Cursor.prototype.getPosition = function() {
  return this.__position;
};


/**
 * @param {number} value increment current position on value.
 */
thrift.Cursor.prototype.incrPosition = function(value) {
  this.__position += value;
};


/**
 * @return {boolean}
 */
thrift.Cursor.prototype.isParsed = function() {
  return this.__isParsed;
};


/**
 * set this.__isParsed in false, flag - finish data.
 */
thrift.Cursor.prototype.breakParsing = function() {
  this.__isParsed = false;
};






/**
 * @constructor
 *
 * @param {string} name
 * @param {number} type
 * @param {number} seqid
 * @param {thrift.Value} value
 */
thrift.Message = function(name, type, seqid, value) {

  /**
   * @type {string}
   */
  this.__name = name;

  /**
   * @type {number}
   */
  this.__type = type;

  /**
   * @type {number}
   */
  this.__seqid = seqid;

  /**
   * @type {thrift.Value}
   */
  this.__value = value;
};


/**
 * @return {thrift.Value}
 */
thrift.Message.prototype.getValue = function() {
  return this.__value;
};


/**
 * @return {number}
 */
thrift.Message.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {string}
 */
thrift.Message.prototype.getName = function() {
  return this.__name;
};


/**
 * @return {number}
 */
thrift.Message.prototype.getId = function() {
  return this.__seqid;
};


/**
 * @return {boolean}
 */
thrift.Message.prototype.isException = function() {
  return this.__type === thrift.definition.MessageType.EXCEPTION;
};



/**
 * @constructor
 * @param {number} type
 * @param {number} id
 * @param {thrift.Value} value
 */
thrift.Field = function(type, id, value) {

  /**
   * @type {thrift.Value}
   */
  this.__value = value;

  /**
   * @type {number}
   */
  this.__type = type;

  /**
   * @type {number}
   */
  this.__id = id;
};


/**
 * @return {thrift.Value}
 */
thrift.Field.prototype.getValue = function() {
  return this.__value;
};


/**
 * @return {number}
 */
thrift.Field.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {number}
 */
thrift.Field.prototype.getId = function() {
  return this.__id;
};



/**
 * @constructor
 * @param {!thrift.protocol.IProtocol}  protocol
 */
thrift.Parser = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol} protocol
   */
  this.__protocol = protocol;

  /**
   * @type {!Buffer}
   */
  this.__readBuffer = new Buffer(0);

  /**
   * @type {thrift.IPacketHandler}
   */
  this.__handler = null;
};


/**
 * @param {!Buffer} chunk
 * @param {function(thrift.Value)} callback
 */
thrift.Parser.prototype.process = function(chunk, callback) {
  var cursor = new thrift.Cursor();

  this.__readBuffer = this.__readBuffer.length > 0 ?
      Buffer.concat([this.__readBuffer, chunk]) : chunk;

  while (this.__readBuffer.length > 0 &&
      cursor.getPosition() < chunk.length && cursor.isParsed()) {

    if (this.__handler === null) {
      this.__handler = thrift.protocol.MESSAGE_HANDLER(this.__protocol);
    }

    if (this.__handler.process(cursor, this.__readBuffer)) {
      callback(this.__handler.get());
      this.__handler = null;
    }
  }

  this.__readBuffer = this.__readBuffer.slice(cursor.getPosition());
};



/**
 *
 * @constructor
 * @implements {thrift.IPacketHandler}
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!thrift.HandlerBuilder} valueHandlerBuilder
 * @param {!thrift.IValueKeeper} valueKeeper
 */
thrift.IncludedHandler = function(protocol, valueHandlerBuilder,
                                  valueKeeper) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {thrift.IPacketHandler}
   */
  this.__valueParser = null;

  /**
   * @type {thrift.IValueKeeper}
   */
  this.__valueKeeper = valueKeeper;

  /**
   * @type {!thrift.HandlerBuilder}
   */
  this.__valueHandlerBuilder = valueHandlerBuilder;
};


/**
 * @inheritDoc
 */
thrift.IncludedHandler.prototype.process = function(cursor, chunk) {
  if (!this.__valueKeeper.isHeaderComplete()) {
    this.__valueKeeper.processHeader(cursor, chunk);
  }

  if (this.__valueKeeper.isHeaderComplete()) {
    this.__processBody(cursor, chunk);
  }

  return cursor.isParsed();
};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 */
thrift.IncludedHandler.prototype.__processBody = function(cursor, chunk) {
  while (cursor.isParsed() && !this.__valueKeeper.isComplete()) {
    if (this.__valueParser === null) {
      this.__valueParser = this.__valueHandlerBuilder(
          this.__valueKeeper.getType(), this.__protocol);

      if (this.__valueParser === null) {
        break;
      }
    }

    if (this.__valueParser !== null) {
      if (this.__valueParser.process(cursor, chunk)) {
        this.__valueKeeper.applyData(this.__valueParser.get());
        this.__valueParser = null;
      }
    }
  }
};


/**
 * @inheritDoc
 */
thrift.IncludedHandler.prototype.get = function() {
  return this.__valueKeeper.get();
};



/**
 * @constructor
 * @implements {thrift.IPacketHandler}
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.SimpleHandler = function(type, protocol) {

  /**
   * @type {number}
   */
  this.__type = type;

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {thrift.Value}
   */
  this.__output = null;
};


/**
 * @inheritDoc
 */
thrift.SimpleHandler.prototype.get = function() {
  return this.__output;
};


/**
 * @inheritDoc
 */
thrift.SimpleHandler.prototype.process = function(cursor, chunk) {
  if (this.__type === thrift.definition.Type.STRING) {
    this.__output = this.__protocol.readString(cursor, chunk);
  } else if (this.__type === thrift.definition.Type.BOOL) {
    this.__output = this.__protocol.readBool(cursor, chunk);
  } else if (this.__type === thrift.definition.Type.BYTE) {
    this.__output = this.__protocol.readByte(cursor, chunk);
  } else if (this.__type === thrift.definition.Type.I16) {
    this.__output = this.__protocol.readI16(cursor, chunk);
  } else if (this.__type === thrift.definition.Type.I32) {
    this.__output = this.__protocol.readI32(cursor, chunk);
  } else if (this.__type === thrift.definition.Type.I64) {
    this.__output = this.__protocol.readI64(cursor, chunk);
  } else if (this.__type === thrift.definition.Type.DOUBLE) {
    this.__output = this.__protocol.readDouble(cursor, chunk);
  }

  return cursor.isParsed();
};



/**
 * @constructor
 * @implements {thrift.IPacketHandler}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {!thrift.IValueKeeper} keeper
 */
thrift.JsonHandler = function(protocol, keeper) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!thrift.IValueKeeper}
   */
  this.__keeper = keeper;
};


/**
 * @inheritDoc
 */
thrift.JsonHandler.prototype.process = function(cursor, chunk) {
  this.__keeper.processHeader(cursor, chunk);

  if (this.__keeper.isHeaderComplete()) {
    this.__keeper.applyData({}); //body inside
  }

  return cursor.isParsed();
};


/**
 * @inheritDoc
 */
thrift.JsonHandler.prototype.get = function() {
  return this.__keeper.get();
};


/**
 * TODO: remove
 *
 * @enum {number}
 */
thrift.definition.ExceptionType = {
  'UNKNOWN': 0,
  'UNKNOWN_METHOD': 1,
  'INVALID_MESSAGE_TYPE': 2,
  'WRONG_METHOD_NAME': 3,
  'BAD_SEQUENCE_ID': 4,
  'MISSING_RESULT': 5,
  'INTERNAL_ERROR': 6,
  'PROTOCOL_ERROR': 7,
  'INVALID_TRANSFORM': 8,
  'INVALID_PROTOCOL': 9,
  'UNSUPPORTED_CLIENT_TYPE': 10
};


/**
 * @enum {number}
 */
thrift.definition.MessageType = {
  CALL: 1,
  REPLY: 2,
  EXCEPTION: 3
};


/**
 * @enum {number}
 */
thrift.definition.Type = {
  'NOP': -1,
  'STOP': 0,
  'VOID': 1,
  'BOOL': 2,
  'BYTE': 3,
  'I08': 3,
  'DOUBLE': 4,
  'I16': 6,
  'I32': 8,
  'I64': 10,
  'STRING': 11,
  'UTF7': 11,
  'STRUCT': 12,
  'MAP': 13,
  'SET': 14,
  'LIST': 15,
  'UTF8': 16,
  'UTF16': 17
};



/**
 * Wrapper for types;
 *
 * @constructor
 * @param {thrift.definition.Type|string} type
 * @param {!thrift.definition.FullType|string|thrift.definition.Type=} opt_vType
 * @param {!thrift.definition.FullType|string|thrift.definition.Type=} opt_kType
 */
thrift.definition.FullType = function(type, opt_vType, opt_kType) {

  /**
   * @type {number}
   */
  this.__type = (typeof type === 'string') ?
      thrift.definition.Type.STRUCT : type;

  /**
   * @type {thrift.definition.FullType}
   */
  this.__kType = null;

  /**
   * @type {thrift.definition.FullType}
   */
  this.__vType = null;

  /**
   * @type {string}
   */
  this.__structType = (typeof type === 'string') ? type : '';


  if (opt_vType !== undefined) {
    this.__vType = (opt_vType instanceof thrift.definition.FullType) ?
        opt_vType : new thrift.definition.FullType(opt_vType ||
            thrift.definition.Type.STRING);
  }

  if (opt_kType !== undefined) {
    this.__kType = (opt_kType instanceof thrift.definition.FullType) ?
        opt_kType : new thrift.definition.FullType(opt_kType ||
            thrift.definition.Type.STRING);
  }
};


/**
 * @return {number}
 */
thrift.definition.FullType.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.FullType.prototype.getKeyType = function() {
  return this.__kType ||
      new thrift.definition.FullType(thrift.definition.Type.NOP);
};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.FullType.prototype.getValueType = function() {
  return this.__vType ||
      new thrift.definition.FullType(thrift.definition.Type.NOP);
};


/**
 * @return {string}
 */
thrift.definition.FullType.prototype.getStructType = function() {
  return this.__structType;
};




/**
 * @constructor
 * @param {string} name
 * @param {number} id
 * @param {thrift.definition.Type|string} type
 * @param {!thrift.definition.FullType|thrift.definition.Type|string=} opt_vType
 * @param {!thrift.definition.FullType|thrift.definition.Type|string=} opt_kType
 */
thrift.definition.Field = function(name, id, type, opt_vType, opt_kType) {

  /**
   * @type {!string}
   */
  this.__name = name;

  /**
   * @type {number}
   */
  this.__id = id;

  /**
   * @type {!thrift.definition.FullType}
   */
  this.__fullType = new thrift.definition.FullType(type, opt_vType, opt_kType);
};


/**
 * @return {!string}
 */
thrift.definition.Field.prototype.getName = function() {
  return this.__name;
};


/**
 * @return {number}
 */
thrift.definition.Field.prototype.getId = function() {
  return this.__id;
};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.Field.prototype.getFullType = function() {
  return this.__fullType;
};


/**
 * @return {number}
 */
thrift.definition.Field.prototype.getType = function() {
  return this.__fullType.getType();
};



/**
 * @constructor
 *
 * @param {!Object.<number, !thrift.definition.Field>} parameters
 * @param {!thrift.definition.FullType=} opt_returnType
 */
thrift.definition.Method = function(parameters, opt_returnType) {

  /**
   * @type {!Object.<(number|string), !thrift.definition.Field>}
   */
  this.__parameters = parameters;

  /**
   * @type {!thrift.definition.FullType}
   */
  this.__returnType = opt_returnType ? opt_returnType :
      new thrift.definition.FullType(thrift.definition.Type.VOID);
};


/**
 * @param {number|string} id
 * @return {thrift.definition.Field}
 */
thrift.definition.Method.prototype.getParameter = function(id) {
  return this.__parameters[id] || null;
};


/**
 * @return {!thrift.definition.FullType}
 */
thrift.definition.Method.prototype.getReturnType = function() {
  return this.__returnType;
};



/**
 * @constructor
 *
 * @param {!Object.<string, !thrift.definition.Field>} fields
 */
thrift.definition.Structure = function(fields) {

  /**
   * @type {!Object.<string, !thrift.definition.Field>}
   */
  this.__fieldsByName = fields;

  /**
   * @type {Object.<string, !thrift.definition.Field>}
   */
  this.__fieldsById = {};

  for (var i in fields) {
    this.__fieldsById[fields[i].getId()] = fields[i];
  }
};


/**
 * @param {string} id
 * @return {thrift.definition.FullType}
 */
thrift.definition.Structure.prototype.getTypeById = function(id) {
  var field = this.__fieldsById[id];
  if (field !== undefined) {
    return field.getFullType();
  } else {
    console.warn('Unknown field id: ' + id +
        '[thrift.definition.Structure.prototype.getTypeById]');
  }

  return null;
};


/**
 * @param {string} name
 * @return {thrift.definition.FullType}
 */
thrift.definition.Structure.prototype.getTypeByName = function(name) {
  var field = this.__fieldsByName[name];
  if (field !== undefined) {
    return field.getFullType();
  } else {
    console.warn('Unknown field name: ' + name +
        '[thrift.definition.Structure.prototype.getTypeById]');
  }

  return null;
};


/**
 * @param {string} name
 * @return {number}
 */
thrift.definition.Structure.prototype.getIdByName = function(name) {
  if (this.__fieldsByName[name] !== undefined) {
    return this.__fieldsByName[name].getId();
  } else {
    console.warn('Unknown field name: ' + name +
        '[thrift.definition.Structure.prototype.getIdByName]');
  }

  return -1;
};



/**
 * @constructor
 * @implements {thrift.protocol.IProtocol}
 * @param {!thrift.ISchema} idl
 */
thrift.protocol.Binary = function(idl) {

  /**
   * @type {!thrift.ISchema}
   */
  this.__idl = idl;
};


/**
 * @type {number} 0x80010000
 */
thrift.protocol.Binary.prototype.VERSION = -2147418112;


/**
 * @type {number} -65536
 */
thrift.protocol.Binary.prototype.VERSION_MASK = 0xffff0000;


/**
 * @type {number}
 */
thrift.protocol.Binary.prototype.TYPE_MASK = 0x000000ff;


/**
 * @return {!thrift.ISchema}
 */
thrift.protocol.Binary.prototype.getIdl = function() {
  return this.__idl;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {
  this.writeI32(collector, this.VERSION | type);
  this.writeString(collector, methodName);
  this.writeI32(collector, seqid);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeStructure =
    function(collector, userStructure, type) {
  var structureInfo = this.__idl.getStructureDefinition(type);
  var structure = userStructure.toThrift();
  if (structureInfo !== null) {
    for (var field in structure) {
      if (structure.hasOwnProperty(field) &&
          structure[field] !== undefined &&
          structure[field] !== null) {
        var typeInfo = structureInfo.getTypeByName(field);
        var id = structureInfo.getIdByName(field);

        this.writeFieldHeader(collector, typeInfo.getType(), id);
        thrift.serializeValue(collector, structure[field], typeInfo, this);
      }
    }
  }

  this.writeStructureStop(collector);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {

  var size = Object.keys(map).length;

  this.writeMapHeader(collector, keyInfo.getType(), valInfo.getType(), size);
  for (var key in map) {
    if (map.hasOwnProperty(key)) {
      thrift.serializeValue(collector, key, keyInfo, this);
      thrift.serializeValue(collector, map[key], valInfo, this);
    }
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.serializeArray =
    function(collector, array, fullValueType) {

  this.writeListHeader(collector, fullValueType.getType(), array.length);

  for (var i = 0; i < array.length; i++) {
    if (array[i] !== undefined) {
      thrift.serializeValue(collector, array[i], fullValueType, this);
    }
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeFieldHeader =
    function(collector, type, id) {
  this.writeByte(collector, type);
  this.writeI16(collector, id);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeFieldStop = function(collector) {};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeStructureStop = function(collector) {
  this.writeByte(collector, 0);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeMapHeader =
    function(collector, ktype, vtype, size) {
  this.writeByte(collector, ktype);
  this.writeByte(collector, vtype);
  this.writeI32(collector, size);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeListHeader =
    function(collector, etype, size) {
  this.writeByte(collector, etype);
  this.writeI32(collector, size);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeSetHeader =
    function(collector, etype, size) {
  this.writeByte(collector, etype);
  this.writeI32(collector, size);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeBool = function(collector, bool) {
  bool ? this.writeByte(collector, 1) : this.writeByte(collector, 0);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeByte = function(collector, value) {
  //collector.push(new Buffer(String.fromCharCode(value)));
  collector.push(new Buffer([value]));
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI16 = function(collector, value) {
  var output = new Buffer(2);
  output[1] = value & 0xff;
  value >>= 8;
  output[0] = value & 0xff;

  collector.push(output);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI32 = function(collector, value) {
  var output = new Buffer(4);
  output[3] = value & 0xff;
  value >>= 8;
  output[2] = value & 0xff;
  value >>= 8;
  output[1] = value & 0xff;
  value >>= 8;
  output[0] = value & 0xff;

  collector.push(output);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeI64 = function(collector, value) {
  if (typeof value === 'number') {
    value = new thrift.protocol.Int64(value);
  }

  collector.push(value.getBuffer());
};


/**
 *
 *
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeDouble = function(collector, double) {
  var value = new Buffer(8);
  var mant = 0;
  var exp = Math.floor(Math.log(double) / Math.LN2);
  var c = Math.pow(2, -exp);
  double = Math.abs(double);

  value[0] = double < 0 ? 0x80 : 0x00;

  if (double * c < 1) {
    exp--;
    c *= 2;
  }

  if (exp + 1023 >= 2047) {
    mant = 0;
    exp = 2047;
  } else if (exp + 1023 >= 1) {
    mant = (double * c - 1) * Math.pow(2, 52);
    exp += 1023;
  } else {
    mant = (double * Math.pow(2, 1022)) * Math.pow(2, 52);
    exp = 0;
  }

  value[1] = (exp << 4) & 0xf0;
  value[0] |= (exp >> 4) & 0x7f;

  value[7] = mant & 0xff;
  mant >>= 8;
  value[6] = mant & 0xff;
  mant >>= 8;
  value[5] = mant & 0xff;
  mant >>= 8;
  value[4] = mant & 0xff;
  mant >>= 8;
  value[3] = mant & 0xff;
  mant >>= 8;
  value[2] = mant & 0xff;
  mant >>= 8;
  value[1] |= mant & 0x0f;

  collector.push(value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.writeString = function(collector, value) {
  this.writeI32(collector, Buffer.byteLength(value));
  collector.push(new Buffer(value));
};


/**
 * @inheritDoc
 */

thrift.protocol.Binary.prototype.readBool = function(cursor, chunk) {
  return this.readByte(cursor, chunk) ? true : false;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readByte = function(cursor, chunk) {
  var value = 0;
  if (cursor.getPosition() < chunk.length) {
    value = chunk[cursor.getPosition()];
    cursor.incrPosition(1);
  } else {
    cursor.breakParsing();
  }

  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI16 = function(cursor, chunk) {
  var value = 0;
  if ((cursor.getPosition() + 1) < chunk.length) {
    value = chunk[cursor.getPosition() + 1];
    value += chunk[cursor.getPosition()] << 8;

    if (chunk[cursor.getPosition()] & 128) {
      value -= Math.pow(2, 16);
    }

    cursor.incrPosition(2);
  } else {
    cursor.breakParsing();
  }
  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI32 = function(cursor, chunk) {
  var value = 0;
  if ((cursor.getPosition() + 3) < chunk.length) {

    value = chunk[cursor.getPosition() + 3];
    value += chunk[cursor.getPosition() + 2] << 8;
    value += chunk[cursor.getPosition() + 1] << 16;
    value += chunk[cursor.getPosition()] << 24;

    if (chunk[cursor.getPosition()] & 0x80) {
      value -= Math.pow(2, 32);
    }

    cursor.incrPosition(4);
  } else {
    cursor.breakParsing();
  }
  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readI64 = function(cursor, chunk) {
  var value = null;
  if ((cursor.getPosition() + 7) < chunk.length) {
    value = new thrift.protocol.Int64(
        chunk.slice(cursor.getPosition(), cursor.getPosition() + 8));
    cursor.incrPosition(8);
  } else {
    cursor.breakParsing();
  }

  return value;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readDouble = function(cursor, chunk) {
  if ((cursor.getPosition() + 7) < chunk.length) {

    var signed = chunk[cursor.getPosition()] & 0x80;
    var e = (chunk[cursor.getPosition() + 1] & 0xF0) >> 4;
    e += (chunk[cursor.getPosition()] & 0x7F) << 4;

    var m = chunk[cursor.getPosition() + 7];
    m += chunk[cursor.getPosition() + 6] << 8;
    m += chunk[cursor.getPosition() + 5] << 16;
    m += chunk[cursor.getPosition() + 4] * Math.pow(2, 24);
    m += chunk[cursor.getPosition() + 3] * Math.pow(2, 32);
    m += chunk[cursor.getPosition() + 2] * Math.pow(2, 40);
    m += (chunk[cursor.getPosition() + 1] & 0x0F) * Math.pow(2, 48);

    switch (e) {
      case 0:
        e = -1022;
        break;
      case 2047:
        return m ? NaN : (signed ? -Infinity : Infinity);
      default:
        m += Math.pow(2, 52);
        e -= 1023;
    }

    if (signed) {
      m *= -1;
    }

    cursor.incrPosition(8);
  } else {
    cursor.breakParsing();
  }

  return m * Math.pow(2, e - 52);
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.readString = function(cursor, chunk) {
  var out = '';
  var len = this.readI32(cursor, chunk);

  if (cursor.isParsed()) {
    if (cursor.getPosition() + len <= chunk.length) {
      out = chunk.toString('utf8', cursor.getPosition(),
              cursor.getPosition() + len);
      cursor.incrPosition(len);
    } else {
      cursor.incrPosition(-4);
      cursor.breakParsing();
    }
  }

  return out;
};


/**
 * @inheritDoc
 */
thrift.protocol.Binary.prototype.getType = function() {
  return thrift.protocol.Type.BINARY;
};



/**
 * @constructor
 * @implements {thrift.protocol.IProtocol}
 *
 * @param {!thrift.ISchema} idl
 */
thrift.protocol.Json = function(idl) {

  /**
   * @type {!thrift.ISchema}
   */
  this.__idl = idl;

  /**
   * @type {!Object}
   */
  this.__body = {};

  /**
   * @type {Array.<!Object>}
   */
  this.__contextPath = [];

  /**
   * @type {?string}
   */
  this.__contextName = null;
};


/**
 * @type {number}
 */
thrift.protocol.Json.VERSION = 1;


/**
 * @enum {string}
 */
thrift.protocol.Json.TYPE = {
  2: 'tf',
  3: 'i8',
  4: 'dbl',
  6: 'i16',
  8: 'i32',
  10: 'i64',
  11: 'str',
  12: 'rec',
  14: 'set',
  13: 'map',
  15: 'lst'
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {
  this.__body = {};
  this.__contextPath = [];
  this.__contextName = null;


  collector.push(thrift.protocol.Json.VERSION);
  collector.push(methodName);
  collector.push(type);
  collector.push(seqid);
  collector.push(this.__body);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeFieldHeader =
    function(collector, type, id) {
  type = thrift.protocol.Json.TYPE[type];
  var context = this.__getContext();

  var field = {};
  this.__writeContext(context, id);
  this.__writeContext(context, field);
  this.__pushContext(field);
  this.__writeContext(field, type);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeFieldStop = function(collector) {
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeStructureStop = function(collector) {
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeArray =
    function(collector, array, fullValueType) {

  var context = this.__getContext();
  var type = thrift.protocol.Json.TYPE[fullValueType.getType()];
  var arr = [type, array.length];

  this.__writeContext(context, arr);
  this.__pushContext(arr);

  for (var i = 0; i < array.length; i++) {
    if (array[i] !== undefined) {
      thrift.serializeValue(collector, array[i], fullValueType, this);
    }
  }
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {

  var context = this.__getContext();
  var ktype = thrift.protocol.Json.TYPE[keyInfo.getType()];
  var vtype = thrift.protocol.Json.TYPE[valInfo.getType()];
  var size = Object.keys(map).length;
  var container = {};
  var arr = [ktype, vtype, size, container];

  this.__writeContext(context, arr);
  this.__pushContext(container);
  for (var key in map) {
    if (map.hasOwnProperty(key)) {
      thrift.serializeValue(collector, key, keyInfo, this);
      //если будет знаечение null, то будет баг
      thrift.serializeValue(collector, map[key], valInfo, this);
    }
  }
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.serializeStructure =
    function(collector, userStructure, type) {

  var structureInfo = this.__idl.getStructureDefinition(type);
  var struct = userStructure.toThrift();
  if (structureInfo !== null) {
    var context = this.__getContext();
    var container = {};
    this.__writeContext(context, container);
    this.__pushContext(container);

    for (var field in struct) {
      if (struct.hasOwnProperty(field) &&
          struct[field] !== undefined &&
          struct[field] !== null) {
        var typeInfo = structureInfo.getTypeByName(field);
        var id = structureInfo.getIdByName(field);

        this.writeFieldHeader(collector, typeInfo.getType(), id);
        thrift.serializeValue(collector, struct[field], typeInfo, this);
        this.writeFieldStop(collector);
      }
    }
  }
  this.__popContext();
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeListHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeMapHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeSetHeader = function() {};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeBool = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value ? 1 : 0);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeByte = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI16 = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI32 = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeI64 = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeDouble = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.writeString = function(collector, value) {
  var context = this.__getContext();
  this.__writeContext(context, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readString = function(cursor, chunk) {
  return '';
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readDouble = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI16 = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readByte = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI64 = function(cursor, chunk) {
  return new thrift.protocol.Int64(-1);
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readBool = function(cursor, chunk) {
  return false;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.readI32 = function(cursor, chunk) {
  return -1;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.getIdl = function() {
  return this.__idl;
};


/**
 * @return {!Object|!Array}
 */
thrift.protocol.Json.prototype.__getContext = function() {
  var context = this.__body;

  if (this.__contextPath.length > 0) {
    context = this.__contextPath[this.__contextPath.length - 1];
  }

  return context;
};


/**
 * @param {!Object|!Array} context
 * @param {!thrift.Value} value
 */
thrift.protocol.Json.prototype.__writeContext = function(context, value) {
  if (context instanceof Array) {

    context.push(value);
  } else if (this.__contextName !== null) {

    context[this.__contextName] = value;
    this.__contextName = null;
  } else if (typeof value === 'string' || typeof value === 'number') {

    context[value] = null;
    this.__contextName = String(value);
  } else {
    console.log('[__writeContext] wrong value', value);
  }
};


/**
 * @param {!Object|!Array} context
 * @param {string=} opt_type
 */
thrift.protocol.Json.prototype.__pushContext = function(context, opt_type) {
  this.__contextPath.push(context);

  if (opt_type) {
    this.__contextName = opt_type;
  } else {
    this.__contextName = null;
  }
};


/**
 */
thrift.protocol.Json.prototype.__popContext = function() {
  this.__contextPath.pop();
  this.__contextName = null;
};


/**
 * @inheritDoc
 */
thrift.protocol.Json.prototype.getType = function() {
  return thrift.protocol.Type.JSON;
};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.MAP_HANDLER = function(type, protocol) {
  return new thrift.IncludedHandler(protocol,
      thrift.handlerBuilder,
      new thrift.protocol.binary.MapKeeper(protocol));
};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.ARRAY_HANDLER = function(type, protocol) {
  return new thrift.IncludedHandler(protocol,
      thrift.handlerBuilder,
      new thrift.protocol.binary.ArrayKeeper(protocol));
};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.FIELD_HANDLER = function(type, protocol) {
  return new thrift.IncludedHandler(protocol,
      thrift.handlerBuilder,
      new thrift.protocol.binary.FieldKeeper(protocol));
};


/**
 * @param {number} type
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.STRUCTURE_HANDLER = function(type, protocol) {
  return new thrift.IncludedHandler(protocol,
      thrift.protocol.FIELD_HANDLER,
      new thrift.protocol.binary.StructureKeeper(protocol));
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @return {!thrift.IPacketHandler}
 */
thrift.protocol.MESSAGE_HANDLER = function(protocol) {
  if (protocol instanceof thrift.protocol.Json) {
    return new thrift.JsonHandler(protocol,
        new thrift.protocol.json.MessageKeeper(protocol));
  }

  return new thrift.IncludedHandler(protocol,
      thrift.protocol.STRUCTURE_HANDLER,
      new thrift.protocol.binary.MessageKeeper(protocol));
};



/**
 * @enum {number}
 */
thrift.protocol.Type = {
  BINARY: 0,
  JSON: 1
};



/**
 * @interface
 */
thrift.protocol.IProtocol = function() {};


/**
 * @return {!thrift.ISchema}
 */
thrift.protocol.IProtocol.prototype.getIdl = function() {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} userStructure
 * @param {!string} type
 */
thrift.protocol.IProtocol.prototype.serializeStructure =
    function(collector, userStructure, type) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} array
 * @param {!thrift.definition.FullType} valInfo
 */
thrift.protocol.IProtocol.prototype.serializeArray =
    function(collector, array, valInfo) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {!Object} map
 * @param {!thrift.definition.FullType} keyInfo
 * @param {!thrift.definition.FullType} valInfo
 */
thrift.protocol.IProtocol.prototype.serializeMap =
    function(collector, map, keyInfo, valInfo) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {string} methodName
 * @param {number} type
 * @param {number} seqid
 */
thrift.protocol.IProtocol.prototype.writeMessageHeader =
    function(collector, methodName, type, seqid) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} id
 */
thrift.protocol.IProtocol.prototype.writeFieldHeader =
    function(collector, type, id) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 */
thrift.protocol.IProtocol.prototype.writeFieldStop = function(collector) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 */
thrift.protocol.IProtocol.prototype.writeStructureStop = function(collector) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} ktype
 * @param {number} vtype
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeMapHeader =
    function(collector, ktype, vtype, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeListHeader =
    function(collector, type, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} type
 * @param {number} size
 */
thrift.protocol.IProtocol.prototype.writeSetHeader =
    function(collector, type, size) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {boolean} value
 */
thrift.protocol.IProtocol.prototype.writeBool = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeByte = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeI16 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeI32 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {thrift.protocol.Int64|number} value
 */
thrift.protocol.IProtocol.prototype.writeI64 = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {number} value
 */
thrift.protocol.IProtocol.prototype.writeDouble = function(collector, value) {};


/**
 * @param {!thrift.protocol.collector.ICollector} collector
 * @param {string} value
 */
thrift.protocol.IProtocol.prototype.writeString = function(collector, value) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {boolean}
 */
thrift.protocol.IProtocol.prototype.readBool = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readByte = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readI16 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readI32 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {thrift.protocol.Int64}
 */
thrift.protocol.IProtocol.prototype.readI64 = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {number}
 */
thrift.protocol.IProtocol.prototype.readDouble = function(cursor, chunk) {};


/**
 * @param {!thrift.Cursor} cursor
 * @param {!Buffer} chunk
 * @return {string}
 */
thrift.protocol.IProtocol.prototype.readString = function(cursor, chunk) {};


/**
 * @return {thrift.protocol.Type}
 */
thrift.protocol.IProtocol.prototype.getType = function() {};



/**
 * @constructor
 *
 * @param {!Buffer|number} int64
 */
thrift.protocol.Int64 = function(int64) {

  /**
   * @type {!Buffer}
   */
  this.__bytes = new Buffer(0);

  /**
   * @type {number}
   */
  this.__number = 0;

  if (int64 instanceof Buffer) {
    this.__bytes = int64;
    this.__number = this.binToDec(int64);
  } else {
    this.__bytes = this.decToBin(int64);
    this.__number = int64;
  }
};


/**
 * @type {number}
 */
thrift.protocol.Int64.prototype.MAX_VALUE = Math.pow(2, 53);


/**
 * @type {number}
 */
thrift.protocol.Int64.prototype.__MASK_32 = 0x100000000;


/**
 * @param {Buffer} chunk
 * @return {number}
 */
thrift.protocol.Int64.prototype.binToDec = function binToDec(chunk) {
  var negative = chunk[0] & 0x80;
  var dop = 1;
  var byte = 0;
  var value = 0;

  for (var i = 7; i >= 0; i--) {
    byte = chunk[i];

    if (negative) {
      byte = (byte ^ 0xff) + dop;
      dop = byte >> 8;
      byte = byte & 0xff;
    }
    value += byte * Math.pow(2, 8 * (7 - i));
  }

  if (value >= this.MAX_VALUE) {
    console.warn('Integer is outside range [thrift.protocol.Int64.binToDec]');
    value = Infinity;
  }

  return negative ? -value : value;
};


/**
 * @param {number} decNumber
 * @return {!Buffer}
 */
thrift.protocol.Int64.prototype.decToBin = function(decNumber) {
  var hight = Math.abs(decNumber) / this.__MASK_32;
  var low = Math.abs(decNumber) % this.__MASK_32;

  if (hight > this.__MASK_32) {
    console.warn('Integer is outside range [thrift.protocol.Int64.decToBin]');
  }

  var value = new Buffer(8);

  for (var i = 7; i >= 0; i--) {
    value[i] = low & 0xff;
    low = i == 4 ? hight : low >>> 8;
  }

  if (decNumber < 0) {
    var dop = 1;
    for (i = 7; i >= 0; i--) {
      var byte = (value[i] ^ 0xff) + dop;
      value[i] = byte & 0xff;
      dop = byte >> 8;
    }
  }

  return value;
};


/**
 * @return {!Buffer}
 */
thrift.protocol.Int64.prototype.getBuffer = function() {
  return this.__bytes;
};


/**
 * @return {number}
 */
thrift.protocol.Int64.prototype.getNumber = function() {
  return this.__number;
};




/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.MessageKeeperBase = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!thrift.ISchema}
   */
  this.__idl = protocol.getIdl();

  /**
   * @type {number}
   */
  this.__type = 0;

  /**
   * @type {!Object}
   */
  this.__result = {};

  /**
   * @type {string}
   */
  this.__name = '';

  /**
   * @type {number}
   */
  this.__id = -1;

  /**
   * @type {boolean}
   */
  this.__isHeaderComplete = false;

  /**
   * @type {boolean}
   */
  this.__isComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.isComplete = function() {
  return this.__isComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.isHeaderComplete = function() {
  return this.__isHeaderComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.get = function() {
  return this.__result;
};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.applyData = function(structure) {
  this.__isComplete = true;

  var value = null;
  var methodDefinition = this.__idl.getMethodDefinition(this.__name);

  if (methodDefinition !== null) {
    if (this.__type === thrift.definition.MessageType.EXCEPTION) {
      value = structure[1];
    }

    if (this.__type === thrift.definition.MessageType.CALL) {
      value = [];

      for (var id in structure) {
        var parameter = methodDefinition.getParameter(id);
        if (parameter !== null) {
          value[parameter.getId() - 1] = thrift.convertNestedStructure(
              structure[id], parameter.getFullType(), this.__idl);
        }
      }
    }

    if (this.__type === thrift.definition.MessageType.REPLY) {
      var fullReturnType = methodDefinition.getReturnType();
      var keysLength = structure instanceof Object ?
          Object.keys(structure).length : 0;

      if (structure[0] !== undefined) {
        value = thrift.convertNestedStructure(
            structure[0], fullReturnType, this.__idl);
      } else if (keysLength > 0) {
        this.__type = thrift.definition.MessageType.EXCEPTION;
        value = structure;
      }
    }
  } else {
    this.__type = thrift.definition.MessageType.EXCEPTION;
  }

  this.__result =
      new thrift.Message(this.__name, this.__type, this.__id, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.MessageKeeperBase.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {number}
 */
thrift.protocol.MessageKeeperBase.prototype.getId = function() {
  return this.__id;
};


/**
 * @return {string}
 */
thrift.protocol.MessageKeeperBase.prototype.getName = function() {
  return this.__name;
};



/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.ArrayKeeper = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {number}
   */
  this.__type = -1;

  /**
   * @type {number}
   */
  this.__length = 0;

  /**
   * @type {!Array}
   */
  this.__result = [];

  /**
   * @type {boolean}
   */
  this.__isHeaderComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.isHeaderComplete = function() {
  return this.__isHeaderComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.processHeader =
    function(cursor, chunk) {
  if (this.__type === -1) {
    var type = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__type = type;
    }
  }

  if (cursor.isParsed()) {
    var length = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__length = length;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.isComplete = function() {
  return this.__length === this.__result.length;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.applyData = function(value) {
  this.__result.push(value);
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.ArrayKeeper.prototype.get = function() {
  return this.__result;
};


/**
 * @return {number}
 */
thrift.protocol.binary.ArrayKeeper.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {number}
 */
thrift.protocol.binary.ArrayKeeper.prototype.getLength = function() {
  return this.__length;
};



/**
 * @implements {thrift.IValueKeeper}
 * @constructor
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.FieldKeeper = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {thrift.Value}
   */
  this.__result = null;

  /**
   * @type {number}
   */
  this.__type = -1;

  /**
   * @type {number}
   */
  this.__id = -1;

  /**
   * @type {boolean}
   */
  this.__isComplete = false;

  /**
   * @type {boolean}
   */
  this.__isHeaderComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.processHeader =
    function(cursor, chunk) {
  if (this.__type === -1) {
    var type = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__type = type;
    }
  }

  if (cursor.isParsed() && this.__type !== thrift.definition.Type.STOP) {
    var id = this.__protocol.readI16(cursor, chunk);
    if (cursor.isParsed()) {
      this.__id = id;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.isHeaderComplete = function() {
  return this.__isHeaderComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.applyData = function(value) {
  this.__isComplete = true;
  this.__result = new thrift.Field(this.__type, this.__id, value);
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.isComplete = function() {
  return this.__isComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.FieldKeeper.prototype.get = function() {
  return this.__result;
};


/**
 * @return {number}
 */
thrift.protocol.binary.FieldKeeper.prototype.getType = function() {
  return this.__type;
};


/**
 * @return {number}
 */
thrift.protocol.binary.FieldKeeper.prototype.getId = function() {
  return this.__id;
};



/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.MapKeeper = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!Object}
   */
  this.__result = {};

  /**
   * @type {number}
   */
  this.__ktype = thrift.definition.Type.NOP;

  /**
   * @type {number}
   */
  this.__vtype = thrift.definition.Type.NOP;

  /**
   * @type {number}
   */
  this.__size = 0;

  /**
   * @type {!thrift.Value}
   */
  this.__key = null;

  /**
   * @type {number}
   */
  this.__pairCount = 0;

  /**
   * @type {number}
   */
  this.__curentType = this.__ktype;

  /**
   * @type {boolean}
   */
  this.__isHeaderComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.isHeaderComplete = function() {
  return this.__isHeaderComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.processHeader =
    function(cursor, chunk) {
  if (this.__ktype === -1) {
    var ktype = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__ktype = ktype;
      this.__curentType = ktype;
    }
  }

  if (cursor.isParsed() && this.__vtype === -1) {
    var vtype = this.__protocol.readByte(cursor, chunk);
    if (cursor.isParsed()) {
      this.__vtype = vtype;
    }
  }

  if (cursor.isParsed()) {
    var size = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__size = size;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.applyData = function(value) {
  if (this.__key === null) {
    this.__key = value;
    this.__curentType = this.__vtype;
  } else {
    this.__result[this.__key] = value;
    this.__key = null;
    this.__curentType = this.__ktype;
    this.__pairCount++;
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.isComplete = function() {
  return this.__pairCount === this.__size;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.MapKeeper.prototype.get = function() {
  return this.__result;
};


/**
 * @return {number}
 */
thrift.protocol.binary.MapKeeper.prototype.getType = function() {
  return this.__curentType;
};



/**
 * @constructor
 * @extends {thrift.protocol.MessageKeeperBase}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.MessageKeeper = function(protocol) {
  thrift.protocol.MessageKeeperBase.call(this, protocol);
};

util.inherits(thrift.protocol.binary.MessageKeeper,
    thrift.protocol.MessageKeeperBase);


/**
 * @override
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.protocol.binary.MessageKeeper.prototype.processHeader =
    function(cursor, chunk) {

  if (this.__type === 0) {
    var info = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__type = info & this.__protocol.TYPE_MASK;
    }
  }

  if (cursor.isParsed() && this.__name === '') {
    var name = this.__protocol.readString(cursor, chunk);
    if (cursor.isParsed()) {
      this.__name = name;
    }
  }

  if (cursor.isParsed() && this.__id === -1) {
    var id = this.__protocol.readI32(cursor, chunk);
    if (cursor.isParsed()) {
      this.__id = id;
    }
  }

  this.__isHeaderComplete = cursor.isParsed();
};



/**
 * @constructor
 * @implements {thrift.IValueKeeper}
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.binary.StructureKeeper = function(protocol) {

  /**
   * @type {!thrift.protocol.IProtocol}
   */
  this.__protocol = protocol;

  /**
   * @type {!thrift.Value}
   */
  this.__result = {};

  /**
   * @type {boolean}
   */
  this.__isComplete = false;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.processHeader =
    function(cursor, chunk) {};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.isHeaderComplete = function() {
  return true;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.applyData = function(field) {
  if (field instanceof thrift.Field) {
    if (field.getType() !== thrift.definition.Type.STOP) {
      this.__result[field.getId()] = field.getValue();
    } else {
      this.__isComplete = true;
    }
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.isComplete = function() {
  return this.__isComplete;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.get = function() {
  return this.__result;
};


/**
 * @inheritDoc
 */
thrift.protocol.binary.StructureKeeper.prototype.getType = function() {
  return thrift.definition.Type.STRUCT;
};



/**
 * @constructor
 * @extends {thrift.protocol.MessageKeeperBase}
 *
 * @param {!thrift.protocol.IProtocol} protocol
 */
thrift.protocol.json.MessageKeeper = function(protocol) {
  thrift.protocol.MessageKeeperBase.call(this, protocol);

  /**
   * @type {thrift.Value}
   */
  this.__structure = {};
};

util.inherits(thrift.protocol.json.MessageKeeper,
    thrift.protocol.MessageKeeperBase);


/**
 * @enum {number}
 */
thrift.protocol.json.MessageKeeper.TYPE = {
  tf: thrift.definition.Type.BOOL,
  i8: thrift.definition.Type.I08,
  dbl: thrift.definition.Type.DOUBLE,
  i16: thrift.definition.Type.I16,
  i32: thrift.definition.Type.I32,
  i64: thrift.definition.Type.I64,
  str: thrift.definition.Type.STRING,
  rec: thrift.definition.Type.STRUCT,
  set: thrift.definition.Type.SET,
  map: thrift.definition.Type.MAP,
  lst: thrift.definition.Type.LIST
};


/**
 * @override
 *
 * @param {!thrift.Cursor} cursor object.
 * @param {!Buffer} chunk Data packet.
 */
thrift.protocol.json.MessageKeeper.prototype.processHeader =
    function(cursor, chunk) {
  try {
    var message = JSON.parse(chunk.toString());

    if (message instanceof Array) {
      this.__name = message[1];
      this.__type = message[2];
      this.__id = message[3];
      this.__isHeaderComplete = true;

      this.__structure = this.__processStructure(message[4]);

      cursor.incrPosition(chunk.length);
    } else {
      cursor.breakParsing();
    }
  } catch (e) {
    cursor.breakParsing();
  }

};


/**
 * @override
 *
 * @param {thrift.Value} value
 */
thrift.protocol.json.MessageKeeper.prototype.applyData = function(value) {
  thrift.protocol.MessageKeeperBase.prototype.applyData.
      call(this, this.__structure);
};


/**
 * @param {thrift.Value} body
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processStructure =
    function(body) {
  var str = {};

  for (var key in body) {
    var field = this.__processField(body[key]);


    if (field !== null) {
      str[key] = field;
    }
  }
  return str;
};


/**
 * @param {thrift.Value} field
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processField = function(field) {
  if (field instanceof Object) {
    var type = Object.keys(field)[0];
    var value = field[type];

    type = thrift.protocol.json.MessageKeeper.TYPE[type];

    if (type) {
      return this.__processValue(type, value);
    }
  }

  return null;
};


/**
 * @param {thrift.Value} list
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processList = function(list) {
  if (list instanceof Array) {
    var arr = [];
    var type = thrift.protocol.json.MessageKeeper.TYPE[list[0]];
    list.splice(0, 2);

    for (var i = 0; i < list.length; i++) {
      arr.push(this.__processValue(type, list[i]));
    }
    return arr;
  }

  return null;
};


/**
 * @param {thrift.Value} map
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processMap = function(map) {
  if (map instanceof Array) {
    var result = {};
    var ktype = thrift.protocol.json.MessageKeeper.TYPE[map[0]];
    var vtype = thrift.protocol.json.MessageKeeper.TYPE[map[1]];
    var value = map[3];

    for (var key in value) {
      result[this.__processValue(ktype, key)] =
          this.__processValue(vtype, value[key]);
    }
    return result;
  }

  return null;
};


/**
 * @param {thrift.Value} value
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processSimple = function(value) {
  return value;
};


/**
 * @param {thrift.definition.Type} type
 * @param {thrift.Value} value
 * @return {thrift.Value}
 */
thrift.protocol.json.MessageKeeper.prototype.__processValue =
    function(type, value) {
  switch (type) {
    case thrift.definition.Type.STRUCT:
      return this.__processStructure(value);

    case thrift.definition.Type.LIST:
    case thrift.definition.Type.SET:
      return this.__processList(value);

    case thrift.definition.Type.MAP:
      return this.__processMap(value);

    case thrift.definition.Type.BOOL:
    case thrift.definition.Type.I08:
    case thrift.definition.Type.DOUBLE:
    case thrift.definition.Type.I16:
    case thrift.definition.Type.I32:
    case thrift.definition.Type.I64:
    case thrift.definition.Type.STRING:
      return this.__processSimple(value);

    default:
      return null;
  }
};


/**
 * @typedef {!Buffer|string}
 */
thrift.protocol.collector.Data;


/**
 * @param {thrift.protocol.IProtocol} protocol
 *
 * @return {!thrift.protocol.collector.ICollector}
 */
thrift.protocol.collector.byProtocol = function(protocol) {
  if (protocol instanceof thrift.protocol.Json) {
    return new thrift.protocol.collector.Array();
  }
  return new thrift.protocol.collector.Buffer();
};



/**
 * @interface
 */
thrift.protocol.collector.ICollector = function() {};


/**
 * @param {*} chunk
 */
thrift.protocol.collector.ICollector.prototype.push = function(chunk) {};


/**
 * @return {!Buffer}
 */
thrift.protocol.collector.ICollector.prototype.getTotal = function() {};



/**
 * @constructor
 * @implements {thrift.protocol.collector.ICollector}
 */
thrift.protocol.collector.Buffer = function() {
  /**
   * @type {!Array.<!Buffer>}
   */
  this.__chunks = [];
  /**
   * @type {!number}
   */
  this.__length = 0;
};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Buffer.prototype.push = function(chunk) {
  if (chunk instanceof Buffer) {
    this.__chunks.push(chunk);
    this.__length += chunk.length;
  }
};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Buffer.prototype.getTotal = function() {
  return Buffer.concat(this.__chunks, this.__length);
};



/**
 * @constructor
 * @implements {thrift.protocol.collector.ICollector}
 */
thrift.protocol.collector.Array = function() {

  this.__total = [];
};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Array.prototype.push = function(chunk) {
  this.__total.push(chunk);
};


/**
 * @inheritDoc
 */
thrift.protocol.collector.Array.prototype.getTotal = function() {
  return new Buffer(JSON.stringify(this.__total));
};

module.exports = thrift;
