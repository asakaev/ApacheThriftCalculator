/**
 * @namespace
 */
var yaa = {};


/**
 * @namespace
 */
yaa.api = {};


/**
 * @namespace
 */
yaa.api.client = {};


/**
 * @namespace
 */
yaa.assert = {};


/**
 * @namespace
 */
yaa.collector = {};


/**
 * @namespace
 */
yaa.iterator = {};


/**
 * @namespace
 */
yaa.proc = {};


/**
 * @namespace
 */
yaa.proc.fold = {};


/**
 * @typedef {Object}
 */
yaa.Context;


/**
 * @typedef {*}
 */
yaa.Input;


/**
 * @typedef {*}
 */
yaa.Output;


/**
 * @typedef {*}
 */
yaa.Error;


/**
 * @typedef {?function(yaa.Error)}
 */
yaa.ErrorHandler;


/**
 * @typedef {?function(...yaa.Output)}
 */
yaa.CompleteHandler;


/**
 * @typedef {yaa.IStep|?function(
 *    !yaa.CompleteHandler, !yaa.ErrorHandler, ...yaa.Input)}
 */
yaa.Step;


/**
 * @typedef {yaa.IStep|?function(
 *    function(boolean), !yaa.ErrorHandler, ...yaa.Input)}
 */
yaa.Condition;


/**
 * @typedef {yaa.Step}
 */
yaa.State;


/**
 * @param {...yaa.Output} var_args
 */
yaa.complete = function(var_args) {};


/**
 * @param {yaa.Error} error
 */
yaa.cancel = function(error) {};


/**
 * @param {yaa.Error} error
 * @return {!yaa.Step}
 */
yaa.error = function(error) {

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function err(complete, cancel) {
    cancel(error);
  }

  return err;
};


/**
 * @param {...yaa.Input} var_args
 * @return {!yaa.Step}
 */
yaa.insert = function(var_args) {
  var output = arguments;

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function insert(complete, cancel) {
    complete(output[0], output[1], output[2], output[3], output[4]);
  }

  return insert;
};


/**
 * @param {!yaa.Step} step
 * @param {yaa.Context} context
 * @return {!yaa.Step}
 */
yaa.bind = function(step, context) {

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function bind(complete, cancel) {
    step.call(context, complete, cancel, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
  }

  return bind;
};


/**
 * @return {!yaa.Step}
 */
yaa.nop = function() {
  return yaa.__nop;
};


/**
 * @return {!yaa.Step}
 */
yaa.yes = function() {
  return yaa.__yes;
};


/**
 * @return {!yaa.Step}
 */
yaa.no = function() {
  return yaa.__no;
};


/**
 * @return {!yaa.Step}
 */
yaa.nothing = function() {
  return yaa.__nothing;
};


/**
 * @param {!yaa.Step} left
 * @param {!yaa.Step} right
 * @return {!yaa.Step}
 */
yaa.pair = function(left, right) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function pair(complete, cancel, var_args) {
    var output = null;

    /**
     * @param {...yaa.Output} var_args
     */
    function handleLeft(var_args) {
      if (output === null) {
        yaa.__leftArgs(output = [], arguments);
      } else {
        yaa.__leftArgs(output, arguments);

        complete(output[0], output[1], output[2], output[3], output[4]);
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleRight(var_args) {
      if (output === null) {
        yaa.__rightArgs(output = [], arguments);
      } else {
        yaa.__rightArgs(output, arguments);

        complete(output[0], output[1], output[2], output[3], output[4]);
      }
    }

    left.call(this, handleLeft, cancel, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
    right.call(this, handleRight, cancel, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
  }

  return pair;
};


/**
 * @param {!(yaa.Step|Array.<!yaa.Step>)=} opt_steps
 * @param {...!yaa.Step} var_args
 * @return {!yaa.Step}
 */
yaa.join = function(opt_steps, var_args) {
  var steps = opt_steps instanceof Array ? opt_steps : arguments;
  var join = steps[0] || yaa.__nothing;

  for (var i = 1; i < steps.length; i += 1) {
    join = yaa.pair(join, steps[i]);
  }

  return join;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @return {!yaa.Step}
 */
yaa.use = function(handler, source) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function use(complete, cancel, var_args) {
    var context = this;

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      handler.call(context, complete, cancel, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
    }

    source.call(context, handleSource, cancel, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
  }

  return use;
};


/**
 * @param {!(yaa.Step|Array.<!yaa.Step>)=} opt_steps
 * @param {...!yaa.Step} var_args
 * @return {!yaa.Step}
 */
yaa.sequence = function(opt_steps, var_args) {
  var steps = opt_steps instanceof Array ? opt_steps : arguments;

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function sequence(complete, cancel, var_args) {
    var context = this;
    var l = steps.length - 1;
    var i = -1;

    /**
     * @param {yaa.Error} error Ошибка.
     */
    function localCancel(error) {
      i = l;
      l -= 1;

      cancel(error);
    }

    /**
     * @param {...yaa.Input} var_args
     */
    function localComplete(var_args) {
      if (i < l) {
        steps[i += 1].call(context, localComplete, localCancel, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      } else if (i === l) {
        complete(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      }
    }

    localComplete(arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
  }

  return sequence;
};


/**
 * @param {!yaa.Condition} condition
 * @param {!yaa.Step} then
 * @param {!yaa.Step=} opt_else
 * @return {!yaa.Step}
 */
yaa.if = function(condition, then, opt_else) {
  var elseStep = opt_else || yaa.__nop;

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function step(complete, cancel, var_args) {
    var input = arguments;
    var context = this;

    /**
     * @param {boolean} result
     */
    function handleCondition(result) {
      if (result) {
        then.call(context, complete, cancel, input[2], input[3], input[4], input[5], input[6]);
      } else {
        elseStep.call(context, complete, cancel, input[2], input[3], input[4], input[5], input[6]);
      }
    }

    condition.call(context, handleCondition, cancel, input[2], input[3], input[4], input[5], input[6]);
  }

  return step;
};


/**
 /**
 * @param {function(...)} step
 * @return {!yaa.Step}
 *
 */
yaa.esc = function(step) {
  return step;
};


/**
 * @param {Array} output
 * @param {!Arguments} args
 */
yaa.__rightArgs = function(output, args) {
  var l = args.length - 1;

  while (l >= 0) {
    if (args[l] !== undefined) {
      break;
    }

    l -= 1;
  }

  for (var i = 0; i <= l; i += 1) {
    output.push(args[i]);
  }
};


/**
 * @param {Array} output
 * @param {!Arguments} args
 */
yaa.__leftArgs = function(output, args) {
  var l = args.length - 1;

  while (l >= 0) {
    if (args[l] !== undefined) {
      break;
    }

    l -= 1;
  }

  for (var i = l; i >= 0; i -= 1) {
    output.unshift(args[i]);
  }
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {...yaa.Input} var_args
 */
yaa.__nop = function(complete, cancel, var_args) {
  complete(arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
yaa.__yes = function(complete, cancel) {
  complete(true);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
yaa.__no = function(complete, cancel) {
  complete(false);
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
yaa.__nothing = function(complete, cancel) {
  complete();
};



/**
 * @interface
 */
yaa.IStep = function() {};


/**
 * @param {yaa.Context} context Контекст выполнения.
 * @param {!yaa.CompleteHandler} complete Обработчик результата.
 * @param {!yaa.ErrorHandler} cancel Обработчик ошибки.
 * @param {...yaa.Input} var_args Входные данные.
 */
yaa.IStep.prototype.call = function(context, complete, cancel, var_args) {};


/**
 * @param {!yaa.Step} step
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.fail = function(step, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {

    /**
     * @param {...yaa.Output} var_args
     */
    function localComplete(var_args) {
      cancel(message);
    }

    /**
     * @param {yaa.Error} error
     */
    function localCancel(error) {
      complete();
    }

    step.call(this, localComplete, localCancel);
  }

  return assert;
};


/**
 * @param {yaa.Context} context
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.contextEquals = function(context, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    if (this === context) {
      complete();
    } else {
      cancel(message);
    }
  }

  return assert;
};


/**
 * @param {yaa.Context} context
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.contextDeepEquals = function(context, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    if (JSON.stringify(this) !== JSON.stringify(context)) {
      cancel(message);
    } else {
      complete();
    }
  }

  return assert;
};


/**
 * @param {!yaa.Step|!Array} left
 * @param {!yaa.Step|!Array} right
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.outputDeepEquals = function(left, right, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    var output = null;

    /**
     * @param {!Arguments} args
     */
    function localComplete(args) {
      if (JSON.stringify(output) !== JSON.stringify(args)) {
        cancel(message);
      } else {
        complete();
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleOutput(var_args) {
      if (output === null) {
        output = arguments;
      } else {
        localComplete(arguments);
      }
    }

    if (left instanceof Array) {
      handleOutput.apply(null, left);
    } else {
      left.call(this, handleOutput, cancel);
    }

    if (right instanceof Array) {
      handleOutput.apply(null, right);
    } else {
      right.call(this, handleOutput, cancel);
    }
  }

  return assert;
};


/**
 * @param {!yaa.Step|!Array} left
 * @param {!yaa.Step|!Array} right
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.outputEquals = function(left, right, message) {

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function assert(complete, cancel) {
    var output = null;

    /**
     * @param {!Arguments|Array} args
     */
    function localComplete(args) {
      var l = Math.max(output.length, args.length);
      var i = 0;


      while (i < l) {
        if (args[i] != output[i]) {
          break;
        }

        i += 1;
      }

      if (i < l) {
        cancel(message);
      } else {
        complete();
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleOutput(var_args) {
      if (output === null) {
        output = arguments;
      } else {
        localComplete(arguments);
      }
    }

    if (left instanceof Array) {
      localComplete(left);
    } else {
      left.call(this, handleOutput, cancel);
    }

    if (right instanceof Array) {
      localComplete(right);
    } else {
      right.call(this, handleOutput, cancel);
    }
  }

  return assert;
};


/**
 * @return {!yaa.Step}
 */
yaa.collector.array = function() {
  var array = [];

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {yaa.Input=} opt_item
   */
  function collector(complete, cancel, opt_item) {
    if (opt_item === undefined) {
      complete(array);
    } else {
      array.push(opt_item);

      complete();
    }
  }

  return collector;
};


/**
 * @return {!yaa.Step}
 */
yaa.collector.flat = function() {
  var array = [];

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {!yaa.Input=} opt_args
   */
  function collector(complete, cancel, opt_args) {
    var args = [arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]];
    args = args.slice(0, args.indexOf(undefined));

    if (args.length === 0) {
      complete(array);
    } else {
      array = array.concat(args);
      complete();
    }
  }

  return collector;
};


/**
 * @param {!Array=} opt_array
 * @return {!yaa.Step}
 */
yaa.iterator.array = function(opt_array) {
  var i = -1;

  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function iteratorByArgs(complete, cancel) {
    complete(opt_array[i += 1]);
  }


  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {!Array} state
   */
  function iteratorByState(complete, cancel, state) {
    complete(state[i += 1]);
  }


  if (opt_array instanceof Array) {
    return yaa.esc(iteratorByArgs);
  } else {
    return yaa.esc(iteratorByState);
  }

};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.parallel = function(handler, source, opt_output) {
  var output = opt_output || yaa.nop();

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function parallel(complete, cancel, var_args) {
    var input = arguments;
    var context = this;
    var c = 0;
    var i = -1;

    /**
     * @param {...yaa.Output} var_args
     */
    function localComplete(var_args) {
      if (c === (i += 1)) {
        output.call(context, complete, cancel, input[2], input[3], input[4], input[5], input[6]);
      }
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      for (var i = 0; i < arguments.length; i += 1) {
        if (arguments[i] !== undefined) {
          c += 1;
          break;
        }
      }

      if (i < arguments.length) {
        handler.call(context, localComplete, cancel, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
        source.call(context, handleSource, cancel, input[2], input[3], input[4], input[5], input[6]);
      } else {
        localComplete();
      }
    }

    source.call(context, handleSource, cancel, input[2], input[3], input[4], input[5], input[6]);
  }

  return parallel;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.sequence = function(handler, source, opt_output) {
  var output = opt_output || yaa.nop();

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function sequence(complete, cancel, var_args) {
    var input = arguments;
    var context = this;

    /**
     * @param {...yaa.Output} var_args
     */
    function callSource(var_args) {
      source.call(context, handleSource, cancel, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      for (var i = 0; i < arguments.length; i += 1) {
        if (arguments[i] !== undefined) {
          break;
        }
      }

      if (i < arguments.length) {
        handler.call(context, callSource, cancel, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      } else {
        output.call(context, complete, cancel, input[2], input[3], input[4], input[5], input[6]);
      }
    }

    callSource(input[2], input[3], input[4], input[5], input[6]);
  }

  return sequence;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.once = function(handler, source, opt_output) {
  var output = opt_output || yaa.nop();

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function once(complete, cancel, var_args) {
    var input = arguments;
    var context = this;

    /**
     * @param {...yaa.Output} var_args
     */
    function localComplete(var_args) {
      output.call(context, complete, cancel, input[2], input[3], input[4], input[5], input[6]);
    }

    /**
     * @param {...yaa.Output} var_args
     */
    function handleSource(var_args) {
      for (var i = 0; i < arguments.length; i += 1) {
        if (arguments[i] !== undefined) {
          break;
        }
      }

      if (i < arguments.length) {
        handler.call(context, localComplete, cancel, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      } else {
        output.call(context, complete, cancel, input[2], input[3], input[4], input[5], input[6]);
      }
    }

    source.call(context, handleSource, cancel, input[2], input[3], input[4], input[5], input[6]);
  }

  return once;
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_collector
 * @return {!yaa.Step}
 */
yaa.proc.fold.parallel = function(handler, source, opt_collector) {
  var collector = opt_collector || yaa.collector.flat();

  return yaa.proc.parallel(
      yaa.use(collector, handler), source, yaa.use(collector, yaa.nothing()));
};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_collector
 * @return {!yaa.Step}
 */
yaa.proc.fold.sequence = function(handler, source, opt_collector) {
  var collector = opt_collector || yaa.collector.flat();

  return yaa.proc.sequence(
      yaa.use(collector, handler), source, yaa.use(collector, yaa.nothing()));
};


/**
 * @param {yaa.Context=} opt_context
 * @return {!yaa.api.ISession}
 */
yaa.api.session = function(opt_context) {
  return new yaa.api.__Session(opt_context === undefined ? null : opt_context);
};



/**
 * @interface
 */
yaa.api.ISession = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!yaa.Step} step
 * @param {boolean} stateful
 */
yaa.api.ISession.prototype.schedule =
    function(complete, cancel, step, stateful) {};



/**
 * @constructor
 * @implements {yaa.api.ISession}
 * @param {yaa.Context} context
 */
yaa.api.__Session = function(context) {

  /**
   * @type {yaa.Context}
   */
  this.__context = context;

  /**
   * @type {yaa.api.__Task}
   */
  this.__head = null;

  /**
   * @type {yaa.api.__Task}
   */
  this.__tail = null;

  /**
   * @type {number}
   */
  this.__lock = 0;
};


/**
 * @inheritDoc
 */
yaa.api.__Session.prototype.schedule =
    function(complete, cancel, step, stateful) {
  var task = new yaa.api.__Task(complete, cancel, step, stateful);

  if (this.__head === null) {
    this.__head = this.__tail = task;
  } else {
    this.__tail = this.__tail.push(task);
  }

  this.__touch();
};


/**
 *
 */
yaa.api.__Session.prototype.__touch = function() {
  var task = this.__head;
  if (task !== null && this.__acquireLock(task.stateful())) {
    if (this.__head !== this.__head.next()) {
      this.__head = this.__head.next();
    } else {
      this.__head = this.__tail = null;
    }

    task.call(this, this.__releaseLock, this.__context);

    this.__touch();
  }
};


/**
 * @param {boolean} stateful
 * @return {boolean}
 */
yaa.api.__Session.prototype.__acquireLock = function(stateful) {
  if (stateful) {
    return this.__acquireWriteLock();
  }

  return this.__acquireReadLock();
};


/**
 * @return {boolean}
 */
yaa.api.__Session.prototype.__acquireReadLock = function() {
  if (this.__lock >= 0) {
    this.__lock += 1;

    return true;
  }

  return false;
};


/**
 * @return {boolean}
 */
yaa.api.__Session.prototype.__acquireWriteLock = function() {
  if (this.__lock === 0) {
    this.__lock = -1;

    return true;
  }

  return false;
};


/**
 *
 */
yaa.api.__Session.prototype.__releaseLock = function() {
  if (this.__lock > 0) {
    this.__lock -= 1;
  } else {
    this.__lock = 0;
  }

  this.__touch();
};



/**
 * @constructor
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!yaa.Step} step
 * @param {boolean} stateful
 */
yaa.api.__Task = function(complete, cancel, step, stateful) {

  /**
   * @type {!yaa.api.__Task}
   */
  this.__next = this;

  /**
   * @type {!yaa.Step}
   */
  this.__step = step;

  /**
   * @type {!yaa.CompleteHandler}
   */
  this.__complete = complete;

  /**
   * @type {!yaa.ErrorHandler}
   */
  this.__cancel = cancel;

  /**
   * @type {boolean}
   */
  this.__stateful = stateful;
};


/**
 * @return {boolean}
 */
yaa.api.__Task.prototype.stateful = function() {
  return this.__stateful;
};


/**
 * @param {yaa.Context} context
 * @param {function()} callback
 * @param {yaa.Context} sessionContext
 */
yaa.api.__Task.prototype.call = function(context, callback, sessionContext) {
  var done = false;
  var self = this;

  /**
   * @param {...yaa.Output} var_args Результат выполнения сценария.
   */
  function localComplete(var_args) {
    if (!done && (done = true)) {
      self.__complete(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);

      callback.call(context);
    }
  }

  /**
   * @param {yaa.Error} error Сообщение ошибки.
   */
  function localCancel(error) {
    if (!done && (done = true)) {
      callback.call(context);
    }

    self.__cancel(error);
  }

  this.__step.call(sessionContext, localComplete, localCancel);
};


/**
 * @param {!yaa.api.__Task} call
 * @return {!yaa.api.__Task}
 */
yaa.api.__Task.prototype.push = function(call) {
  return this.__next = call;
};


/**
 * @return {!yaa.api.__Task}
 */
yaa.api.__Task.prototype.next = function() {
  return this.__next;
};


/**
 * @typedef {yaa.Step|?function(
 *    function(!yaa.Step), !yaa.ErrorHandler, ...)}
 */
yaa.api.client.Provider;


/**
 * @param {!yaa.api.client.Provider} provider
 * @return {!yaa.Step}
 */
yaa.api.client.session = function(provider) {
  var step = null;
  var head = null;
  var tail = null;

  /**
   * @param {!yaa.Step} result
   */
  function flush(result) {
    step = result;

    if (tail !== null) {
      tail.apply(result);

      while (tail !== head) {
        tail = tail.next();
        tail.apply(result);
      }

      tail = head = null;
    }
  }

  /**
   * @param {yaa.Error} error
   */
  function destroy(error) {
    step = null;

    if (tail !== null) {
      tail.break(error);

      while (tail !== head) {
        tail = tail.next();
        tail.break(error);
      }

      tail = head = null;
    }
  }

  /**
   * @this {yaa.Context}
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {...yaa.Input} var_args
   */
  function session(complete, cancel, var_args) {
    if (step === null) {
      var call = new yaa.api.client.__Call(
          this, complete, cancel, arguments);

      if (head === null) {
        tail = head = call;

        provider.call(this, flush, destroy, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      } else {
        head = head.push(call);
      }
    } else {
      step.call(this, complete, cancel, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
    }
  }

  return session;
};



/**
 * @constructor
 * @param {yaa.Context} context
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!Arguments} args
 */
yaa.api.client.__Call = function(context, complete, cancel, args) {

  /**
   * @type {!yaa.api.client.__Call}
   */
  this.__next = this;

  /**
   * @type {yaa.Context}
   */
  this.__context = context;

  /**
   * @type {!yaa.CompleteHandler}
   */
  this.__complete = complete;

  /**
   * @type {!yaa.ErrorHandler}
   */
  this.__cancel = cancel;

  /**
   * @type {!Arguments}
   */
  this.__args = args;
};


/**
 * @param {!yaa.Step} step
 */
yaa.api.client.__Call.prototype.apply = function(step) {
  step.call(this.__context, this.__complete, this.__cancel, this.__args[2], this.__args[3], this.__args[4], this.__args[5], this.__args[6]);
};


/**
 * @param {!yaa.Error} error
 */
yaa.api.client.__Call.prototype.break = function(error) {
  this.__cancel(error);
};


/**
 * @param {!yaa.api.client.__Call} call
 * @return {!yaa.api.client.__Call}
 */
yaa.api.client.__Call.prototype.push = function(call) {
  return this.__next = call;
};


/**
 * @return {!yaa.api.client.__Call}
 */
yaa.api.client.__Call.prototype.next = function() {
  return this.__next;
};

module.exports = yaa;

