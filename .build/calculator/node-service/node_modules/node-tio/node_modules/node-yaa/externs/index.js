/**
 * @namespace
 */
var yaa = {};


/**
 * @namespace
 */
yaa.api = {};


/**
 * @namespace
 */
yaa.api.client = {};


/**
 * @namespace
 */
yaa.assert = {};


/**
 * @namespace
 */
yaa.collector = {};


/**
 * @namespace
 */
yaa.iterator = {};


/**
 * @namespace
 */
yaa.proc = {};


/**
 * @namespace
 */
yaa.proc.fold = {};


/**
 * @typedef {Object}
 */
yaa.Context;


/**
 * @typedef {*}
 */
yaa.Input;


/**
 * @typedef {*}
 */
yaa.Output;


/**
 * @typedef {*}
 */
yaa.Error;


/**
 * @typedef {?function(yaa.Error)}
 */
yaa.ErrorHandler;


/**
 * @typedef {?function(...yaa.Output)}
 */
yaa.CompleteHandler;


/**
 * @typedef {yaa.IStep|?function(
 *    !yaa.CompleteHandler, !yaa.ErrorHandler, yaa.Input, yaa.Input, yaa.Input, yaa.Input, yaa.Input, yaa.Input, yaa.Input)}
 */
yaa.Step;


/**
 * @typedef {yaa.IStep|?function(
 *    function(boolean), !yaa.ErrorHandler, yaa.Input, yaa.Input, yaa.Input, yaa.Input, yaa.Input, yaa.Input, yaa.Input)}
 */
yaa.Condition;


/**
 * @typedef {yaa.Step}
 */
yaa.State;


/**
 * @param {...yaa.Output} var_args
 */
yaa.complete = function(var_args) {};


/**
 * @param {yaa.Error} error
 */
yaa.cancel = function(error) {};


/**
 * @param {yaa.Error} error
 * @return {!yaa.Step}
 */
yaa.error = function(error) {};


/**
 * @param {...yaa.Input} var_args
 * @return {!yaa.Step}
 */
yaa.insert = function(var_args) {};


/**
 * @param {!yaa.Step} step
 * @param {yaa.Context} context
 * @return {!yaa.Step}
 */
yaa.bind = function(step, context) {};


/**
 * @return {!yaa.Step}
 */
yaa.nop = function() {};


/**
 * @return {!yaa.Step}
 */
yaa.yes = function() {};


/**
 * @return {!yaa.Step}
 */
yaa.no = function() {};


/**
 * @return {!yaa.Step}
 */
yaa.nothing = function() {};


/**
 * @param {!yaa.Step} left
 * @param {!yaa.Step} right
 * @return {!yaa.Step}
 */
yaa.pair = function(left, right) {};


/**
 * @param {!(yaa.Step|Array.<!yaa.Step>)=} opt_steps
 * @param {...!yaa.Step} var_args
 * @return {!yaa.Step}
 */
yaa.join = function(opt_steps, var_args) {};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @return {!yaa.Step}
 */
yaa.use = function(handler, source) {};


/**
 * @param {!(yaa.Step|Array.<!yaa.Step>)=} opt_steps
 * @param {...!yaa.Step} var_args
 * @return {!yaa.Step}
 */
yaa.sequence = function(opt_steps, var_args) {};


/**
 * @param {!yaa.Condition} condition
 * @param {!yaa.Step} then
 * @param {!yaa.Step=} opt_else
 * @return {!yaa.Step}
 */
yaa.if = function(condition, then, opt_else) {};


/**
 * @param {function(...)} step
 * @return {!yaa.Step}
 *
 */
yaa.esc = function(step) {};


/**
 * @interface
 */
yaa.IStep = function() {};


/**
 * @param {yaa.Context} context Контекст выполнения.
 * @param {!yaa.CompleteHandler} complete Обработчик результата.
 * @param {!yaa.ErrorHandler} cancel Обработчик ошибки.
 * @param {...yaa.Input} var_args Входные данные.
 */
yaa.IStep.prototype.call = function(context, complete, cancel, var_args) {};


/**
 * @param {!yaa.Step} step
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.fail = function(step, message) {};


/**
 * @param {yaa.Context} context
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.contextEquals = function(context, message) {};


/**
 * @param {yaa.Context} context
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.contextDeepEquals = function(context, message) {};


/**
 * @param {!yaa.Step|!Array} left
 * @param {!yaa.Step|!Array} right
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.outputDeepEquals = function(left, right, message) {};


/**
 * @param {!yaa.Step|!Array} left
 * @param {!yaa.Step|!Array} right
 * @param {yaa.Error} message
 * @return {!yaa.Step}
 */
yaa.assert.outputEquals = function(left, right, message) {};


/**
 * @return {!yaa.Step}
 */
yaa.collector.array = function() {};


/**
 * @return {!yaa.Step}
 */
yaa.collector.flat = function() {};


/**
 * @param {!Array=} opt_array
 * @return {!yaa.Step}
 */
yaa.iterator.array = function(opt_array) {};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.parallel = function(handler, source, opt_output) {};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.sequence = function(handler, source, opt_output) {};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_output
 * @return {!yaa.Step}
 */
yaa.proc.once = function(handler, source, opt_output) {};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_collector
 * @return {!yaa.Step}
 */
yaa.proc.fold.parallel = function(handler, source, opt_collector) {};


/**
 * @param {!yaa.Step} handler
 * @param {!yaa.Step} source
 * @param {!yaa.Step=} opt_collector
 * @return {!yaa.Step}
 */
yaa.proc.fold.sequence = function(handler, source, opt_collector) {};


/**
 * @param {yaa.Context=} opt_context
 * @return {!yaa.api.ISession}
 */
yaa.api.session = function(opt_context) {};


/**
 * @interface
 */
yaa.api.ISession = function() {};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {!yaa.Step} step
 * @param {boolean} stateful
 */
yaa.api.ISession.prototype.schedule =
    function(complete, cancel, step, stateful) {};


/**
 * @typedef {yaa.Step|?function(
 *    function(!yaa.Step), !yaa.ErrorHandler, ...)}
 */
yaa.api.client.Provider;


/**
 * @param {!yaa.api.client.Provider} provider
 * @return {!yaa.Step}
 */
yaa.api.client.session = function(provider) {};




