


/**
 * @constructor
 * @param {number} port
 * @param {string} host
 */
tio.process.Endpoint = function(port, host) {

  /**
   * @type {!http.Server}
   */
  this.__server = http.createServer();

  /**
   * @type {number}
   */
  this.__port = port;

  /**
   * @type {string}
   */
  this.__host = host;

  /**
   * @type {boolean}
   */
  this.__isRunnig = false;
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 * @param {function(!http.IncomingMessage, !http.ServerResponse)} listener
 */
tio.process.Endpoint.prototype.listen = function(complete, cancel, listener) {
  console.info('Start listening at "' +
      this.__host + '":"' + this.__port + '".');

  var self = this;

  function localComplete() {
    self.__server.removeListener('error', localCancel);
    self.__server.removeListener('listening', localComplete);

    complete();
  }

  /**
   * @param {yaa.Error} error
   */
  function localCancel(error) {
    console.error('Unable to listen "' +
        self.__host + ':' + self.__port + '".');

    self.__server.removeListener('error', localCancel);
    self.__server.removeListener('listening', localComplete);

    cancel(error);
  }

  this.__server.addListener('error', localCancel);
  this.__server.addListener('listening', localComplete);
  this.__server.addListener('request', listener);

  this.__server.listen(this.__port, this.__host);
  this.__isRunnig = true;
};


/**
 * @param {!yaa.CompleteHandler} complete
 * @param {!yaa.ErrorHandler} cancel
 */
tio.process.Endpoint.prototype.close = function(complete, cancel) {
  console.info('Stop listening at "' +
      this.__host + ':' + this.__port + '".');

  if (this.__isRunnig) {
    this.__server.close(complete);
    this.__isRunnig = false;
  } else {
    complete();
  }
};
