

/**
 * @typedef {{
 *   hostname: string,
 *   port: number,
 *   path: string
 * }}
 */
tio.client.HttpOptions;


/**
 * @param {number} port
 * @param {string} host
 */
tio.client.init = function(port, host) {
  console.info('Init thrift-io client for "' +
      host + ':' + port + '" discovery endpoint.');

  tio.client.__host = host;
  tio.client.__port = port;
};


/**
 * @param {!thrift.protocol.IProtocol} protocol
 * @param {string} name
 * @param {string} version
 * @param {string} type
 * @return {!yaa.api.client.Provider}
 */
tio.client.http = function(protocol, name, version, type) {

  /**
   * @param {function(!tio.client.__Http)} complete
   * @param {!yaa.ErrorHandler} cancel
   */
  function provider(complete, cancel) {

    /**
     * @param {!Array.<!Object>} nodes
     */
    function localComplete(nodes) {
      var endpoint = tio.client.__selectEndpoint(type, nodes);
      if (endpoint !== null) {
        console.info('Request for "' + name + '@' + version +
            '" will address to "' + endpoint.hostname + ':' +
                endpoint.port + '".');

        complete(new tio.client.__Http(protocol, endpoint));
      } else {
        cancel('Unable to select endpoints.');
      }
    }

    tio.client.__requestEndpoints(localComplete, cancel, name, version);
  }

  return provider;
};


/**
 * @param {string} type
 * @param {!Array.<!Object>} nodes
 * @return {tio.client.HttpOptions}
 */
tio.client.__selectEndpoint = function(type, nodes) {
  console.info('Select for "' + type + '" service interface address.');

  var endpoints = [];

  for (var i = 0; i < nodes.length; i += 1) {
    var tags = nodes[i]['ServiceTags'];

    for (var j = 0; j < tags.length; j += 1) {
      var tag = tags[j];
      if (tag.indexOf(type + '=') === 0) {
        var address = tag.substr(type.length + 1).split(':');

        endpoints.push({
          'hostname': address.shift(),
          'port': address.shift()
        });
      }
    }
  }

  return endpoints[Math.floor(Math.random() * endpoints.length)] || null;
};


/**
 * @param {function(!Array.<!Object>)} complete
 * @param {yaa.ErrorHandler} cancel
 * @param {string} name
 * @param {string} version
 */
tio.client.__requestEndpoints = function(complete, cancel, name, version) {
  console.info('Request for "' + name + '@' + version + '" service endpoints.');

  var request = http.request({
    'path': '/v1/catalog/service/' + name + '?tag=v' + version,
    'hostname': tio.client.__host,
    'port': tio.client.__port
  });

  /**
   * @param {!http.IncomingMessage} response
   */
  function localComplete(response) {
    var payload = '';

    /**
     * @param {!Buffer} chunk
     */
    function process(chunk) {
      payload += chunk;
    }

    function localComplete() {
      var data = null;
      var error = null;

      try {
        data = JSON.parse(payload);
      } catch (err) {
        error = err;
      }

      if (data instanceof Array) {
        complete(data);
      } else {
        cancel(error);
      }
    }

    response.addListener('data', process);
    response.addListener('close', localComplete);
    response.addListener('error', localComplete);
    response.addListener('end', localComplete);
    request.removeAllListeners();
  }

  /**
   * @param {!Error} error
   */
  function localCancel(error) {
    request.removeAllListeners();

    cancel(error);
  }

  request.addListener('response', localComplete);
  request.addListener('error', localCancel);
  request.end();
};


/**
 * @type {string}
 */
tio.client.__host = '127.0.0.1';


/**
 * @type {number}
 */
tio.client.__port = 8500;
