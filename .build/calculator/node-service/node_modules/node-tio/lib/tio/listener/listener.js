

/**
 * @typedef {?function(!http.IncomingMessage, !http.ServerResponse)}
 */
tio.listener.Processor;


/**
 * @param {!tio.listener.IProtocol} protocol
 * @param {!tio.listener.IRouter} router
 * @return {!tio.listener.Processor}
 */
tio.listener.listen = function(protocol, router) {
  var scheduler = tio.listener.__scheduler(router);

  /**
   * @param {!http.IncomingMessage} request
   * @param {!http.ServerResponse} response
   */
  function listen(request, response) {

    /**
     * @param {yaa.Error} error
     */
    function cancel(error) {
      console.warn('Unable to decode request "' + error + '".');
      protocol.cancel(response, error);
    }

    protocol.process(request, tio.listener.__processor(
        protocol, response, scheduler), cancel);
  }

  return listen;
};


/**
 * @param {!tio.listener.IProtocol} protocol
 * @param {!http.ServerResponse} response
 * @param {!yaa.Step} scheduler
 * @return {function(!tio.thrift.Message)}
 */
tio.listener.__processor = function(protocol, response, scheduler) {

  /**
   * @param {!tio.thrift.Message} call
   */
  function processor(call) {
    function complete() {
      protocol.complete(response, call, arguments);
    }

    /**
     * @param {yaa.Error} error
     */
    function cancel(error) {
      console.warn('Error processing request "' +
          call + '": "' + error + '".');

      protocol.cancel(response, error, call);
    }

    scheduler.call(null, complete, cancel, call);
  }

  return processor;
};


/**
 * @param {!tio.listener.IRouter} router
 * @return {!yaa.Step}
 */
tio.listener.__scheduler = function(router) {


  /**
   * @param {!yaa.CompleteHandler} complete
   * @param {!yaa.ErrorHandler} cancel
   * @param {!tio.thrift.Message} call
   */
  function scheduler(complete, cancel, call) {

    /**
     * @param {!yaa.api.ISession} session
     */
    function schedule(session) {
      session.schedule(complete, cancel,
          router.step(call), router.stateful(call));
    }

    router.session(schedule, cancel, call);
  }


  return yaa.esc(scheduler);
};
